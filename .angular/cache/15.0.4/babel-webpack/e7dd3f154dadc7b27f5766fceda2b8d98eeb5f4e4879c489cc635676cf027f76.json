{"ast":null,"code":"import { catchError, tap } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.user = new Subject();\n  }\n  signup(email, password) {\n    return this.http.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBySJaOQL3zotQIkxS7SV-b9ASWyB_s2y8\", {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {}));\n  }\n  login(email, password) {\n    return this.http.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBySJaOQL3zotQIkxS7SV-b9ASWyB_s2y8\", {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError));\n  }\n  handleError(errorRes) {\n    let errorMessage = \"An unknown error occured!\";\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case \"EMAIL_EXISTS\":\n        errorMessage = \"This email already exists\";\n        break;\n      case \"EMAIL_NOT_FOUND\":\n        errorMessage = \"This email is not found\";\n        break;\n      case \"INVALID_PASSWORD\":\n        errorMessage = \"Wrong password\";\n    }\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AAChD,SAASC,UAAU,QAAQ,MAAM;AAEjC,SAASC,OAAO,QAAQ,MAAM;;;AAa9B,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,SAAI,GAAG,IAAIH,OAAO,EAAQ;EAEa;EAEvCI,MAAM,CAACC,KAAa,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACH,IAAI,CACbI,IAAI,CACH,uGAAuG,EACvG;MACEF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACpB,CACF,CACAC,IAAI,CACHZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,EAC5BZ,GAAG,CAAEa,OAAO,IAAI,CAAE,CAAC,CAAC,CACrB;EACL;EAEAC,KAAK,CAACP,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CACbI,IAAI,CACH,mHAAmH,EACnH;MACEF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACpB,CACF,CACAC,IAAI,CAACZ,UAAU,CAAC,IAAI,CAACa,WAAW,CAAC,CAAC;EACvC;EAEQA,WAAW,CAACG,QAA2B;IAC7C,IAAIC,YAAY,GAAG,2BAA2B;IAC9C,IAAI,CAACD,QAAQ,CAACE,KAAK,IAAI,CAACF,QAAQ,CAACE,KAAK,CAACA,KAAK,EAAE;MAC5C,OAAOhB,UAAU,CAACe,YAAY,CAAC;;IAEjC,QAAQD,QAAQ,CAACE,KAAK,CAACA,KAAK,CAACC,OAAO;MAClC,KAAK,cAAc;QACjBF,YAAY,GAAG,2BAA2B;QAC1C;MACF,KAAK,iBAAiB;QACpBA,YAAY,GAAG,yBAAyB;QACxC;MACF,KAAK,kBAAkB;QACrBA,YAAY,GAAG,gBAAgB;IAAC;IAEpC,OAAOf,UAAU,CAACe,YAAY,CAAC;EACjC;;AAlDWb,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAgB,SAAXhB,WAAW;EAAAiB,YADE;AAAM","names":["catchError","tap","throwError","Subject","AuthService","constructor","http","signup","email","password","post","returnSecureToken","pipe","handleError","resData","login","errorRes","errorMessage","error","message","factory","providedIn"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport { Subject } from \"rxjs\";\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  user = new Subject<User>();\n\n  constructor(private http: HttpClient) {}\n\n  signup(email: string, password: string) {\n    return this.http\n      .post<AuthResponseData>(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBySJaOQL3zotQIkxS7SV-b9ASWyB_s2y8\",\n        {\n          email: email,\n          password: password,\n          returnSecureToken: true,\n        }\n      )\n      .pipe(\n        catchError(this.handleError),\n        tap((resData) => {})\n      );\n  }\n\n  login(email: string, password: string) {\n    return this.http\n      .post<AuthResponseData>(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBySJaOQL3zotQIkxS7SV-b9ASWyB_s2y8\",\n        {\n          email: email,\n          password: password,\n          returnSecureToken: true,\n        }\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  private handleError(errorRes: HttpErrorResponse) {\n    let errorMessage = \"An unknown error occured!\";\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case \"EMAIL_EXISTS\":\n        errorMessage = \"This email already exists\";\n        break;\n      case \"EMAIL_NOT_FOUND\":\n        errorMessage = \"This email is not found\";\n        break;\n      case \"INVALID_PASSWORD\":\n        errorMessage = \"Wrong password\";\n    }\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}