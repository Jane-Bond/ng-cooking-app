{"ast":null,"code":"import { map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class AuthGuard {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  canActivate(route, router) {\n    return this.authService.user.pipe(map(user => {\n      const isAuth = !!user;\n      if (isAuth) {\n        return true;\n      }\n      return this.router.createUrlTree([\"/auth\"]);\n    }));\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAQA,SAASA,GAAG,QAAQ,gBAAgB;;;AAIpC,OAAM,MAAOC,SAAS;EACpBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,WAAW,CACTC,KAA6B,EAC7BC,MAA2B;IAM3B,OAAO,IAAI,CAACH,WAAW,CAACI,IAAI,CAACC,IAAI,CAC/BR,GAAG,CAAEO,IAAI,IAAI;MACX,MAAME,MAAM,GAAG,CAAC,CAACF,IAAI;MACrB,IAAIE,MAAM,EAAE;QACV,OAAO,IAAI;;MAEb,OAAO,IAAI,CAACH,MAAM,CAACI,aAAa,CAAC,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC,CAAC,CACH;EACH;;AApBWT,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAU,SAATV,SAAS;EAAAW,YADI;AAAM","names":["map","AuthGuard","constructor","authService","canActivate","route","router","user","pipe","isAuth","createUrlTree","factory","providedIn"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/auth/auth.guard.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  RouterStateSnapshot,\n  UrlTree,\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { AuthService } from \"./auth.service\";\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    router: RouterStateSnapshot\n  ):\n    | boolean\n    | UrlTree\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree> {\n    return this.authService.user.pipe(\n      map((user) => {\n        const isAuth = !!user;\n        if (isAuth) {\n          return true;\n        }\n        return this.router.createUrlTree([\"/auth\"]);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}