{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { exhaustMap, take } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class AuthInterceptorService {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    return this.authService.user.pipe(take(1), exhaustMap(user => {\n      if (!user) {\n        return next.handle(req);\n      }\n      const modifiedReq = req.clone({\n        params: new HttpParams().set(\"auth\", user.token)\n      });\n      return next.handle(modifiedReq);\n    }));\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAGEA,UAAU,QAEL,sBAAsB;AAE7B,SAASC,UAAU,EAAEC,IAAI,QAAQ,gBAAgB;;;AAGjD,OAAM,MAAOC,sBAAsB;EACjCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,OAAO,IAAI,CAACH,WAAW,CAACI,IAAI,CAACC,IAAI,CAC/BR,IAAI,CAAC,CAAC,CAAC,EACPD,UAAU,CAAEQ,IAAI,IAAI;MAClB,IAAI,CAACA,IAAI,EAAE;QACT,OAAOD,IAAI,CAACG,MAAM,CAACJ,GAAG,CAAC;;MAEzB,MAAMK,WAAW,GAAGL,GAAG,CAACM,KAAK,CAAC;QAC5BC,MAAM,EAAE,IAAId,UAAU,EAAE,CAACe,GAAG,CAAC,MAAM,EAAEN,IAAI,CAACO,KAAK;OAChD,CAAC;MACF,OAAOR,IAAI,CAACG,MAAM,CAACC,WAAW,CAAC;IACjC,CAAC,CAAC,CACH;EACH;;AAhBWT,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAc,SAAtBd,sBAAsB;AAAA","names":["HttpParams","exhaustMap","take","AuthInterceptorService","constructor","authService","intercept","req","next","user","pipe","handle","modifiedReq","clone","params","set","token","factory"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/auth/auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  HttpHandler,\n  HttpInterceptor,\n  HttpParams,\n  HttpRequest,\n} from \"@angular/common/http\";\nimport { AuthService } from \"./auth.service\";\nimport { exhaustMap, take } from \"rxjs/operators\";\n\n@Injectable()\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(private authService: AuthService) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    return this.authService.user.pipe(\n      take(1),\n      exhaustMap((user) => {\n        if (!user) {\n          return next.handle(req);\n        }\n        const modifiedReq = req.clone({\n          params: new HttpParams().set(\"auth\", user.token),\n        });\n        return next.handle(modifiedReq);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}