{"ast":null,"code":"import { catchError } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n  }\n  signup(email, password) {\n    return this.http.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBySJaOQL3zotQIkxS7SV-b9ASWyB_s2y8\", {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(errorRes => {\n      let errorMessage = \"An unknown error occured!\";\n      if (!errorRes.error || !errorRes.error.error) {\n        return throwError(errorMessage);\n      }\n      switch (errorRes.error.error.message) {\n        case \"EMAIL_EXISTS\":\n          errorMessage = \"This email already exists\";\n      }\n      return throwError(errorMessage);\n    }));\n  }\n  login(email, password) {\n    return this.http.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBySJaOQL3zotQIkxS7SV-b9ASWyB_s2y8\", {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    });\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,QAAQ,gBAAgB;AAC3C,SAASC,UAAU,QAAQ,MAAM;;;AAajC,OAAM,MAAOC,WAAW;EACtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCC,MAAM,CAACC,KAAa,EAAEC,QAAgB;IACpC,OAAO,IAAI,CAACH,IAAI,CACbI,IAAI,CACH,uGAAuG,EACvG;MACEF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACpB,CACF,CACAC,IAAI,CACHV,UAAU,CAAEW,QAAQ,IAAI;MACtB,IAAIC,YAAY,GAAG,2BAA2B;MAC9C,IAAI,CAACD,QAAQ,CAACE,KAAK,IAAI,CAACF,QAAQ,CAACE,KAAK,CAACA,KAAK,EAAE;QAC5C,OAAOZ,UAAU,CAACW,YAAY,CAAC;;MAEjC,QAAQD,QAAQ,CAACE,KAAK,CAACA,KAAK,CAACC,OAAO;QAClC,KAAK,cAAc;UACjBF,YAAY,GAAG,2BAA2B;MAAC;MAE/C,OAAOX,UAAU,CAACW,YAAY,CAAC;IACjC,CAAC,CAAC,CACH;EACL;EAEAG,KAAK,CAACT,KAAa,EAAEC,QAAgB;IACnC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CACnB,mHAAmH,EACnH;MACEF,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBE,iBAAiB,EAAE;KACpB,CACF;EAED;;AAtCSP,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAc,SAAXd,WAAW;EAAAe,YADE;AAAM","names":["catchError","throwError","AuthService","constructor","http","signup","email","password","post","returnSecureToken","pipe","errorRes","errorMessage","error","message","login","factory","providedIn"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  constructor(private http: HttpClient) {}\n\n  signup(email: string, password: string) {\n    return this.http\n      .post<AuthResponseData>(\n        \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBySJaOQL3zotQIkxS7SV-b9ASWyB_s2y8\",\n        {\n          email: email,\n          password: password,\n          returnSecureToken: true,\n        }\n      )\n      .pipe(\n        catchError((errorRes) => {\n          let errorMessage = \"An unknown error occured!\";\n          if (!errorRes.error || !errorRes.error.error) {\n            return throwError(errorMessage);\n          }\n          switch (errorRes.error.error.message) {\n            case \"EMAIL_EXISTS\":\n              errorMessage = \"This email already exists\";\n          }\n          return throwError(errorMessage);\n        })\n      );\n  }\n\n  login(email: string, password: string) {\n    return this.http.post<AuthResponseData>(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBySJaOQL3zotQIkxS7SV-b9ASWyB_s2y8\",\n      {\n        email: email,\n        password: password,\n        returnSecureToken: true,\n      }\n    );\n\n    private handleError(errorRes:);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}