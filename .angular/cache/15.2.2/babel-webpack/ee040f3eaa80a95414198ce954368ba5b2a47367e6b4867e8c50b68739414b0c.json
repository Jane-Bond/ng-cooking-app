{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport * as i2 from '@ngrx/store';\nimport { ActionsSubject, UPDATE, INIT, INITIAL_STATE, StateObservable, ReducerManagerDispatcher } from '@ngrx/store';\nimport { EMPTY, Observable, of, merge, queueScheduler, ReplaySubject } from 'rxjs';\nimport { share, filter, map, concatMap, timeout, debounceTime, catchError, take, takeUntil, switchMap, skip, observeOn, withLatestFrom, scan } from 'rxjs/operators';\nconst PERFORM_ACTION = 'PERFORM_ACTION';\nconst REFRESH = 'REFRESH';\nconst RESET = 'RESET';\nconst ROLLBACK = 'ROLLBACK';\nconst COMMIT = 'COMMIT';\nconst SWEEP = 'SWEEP';\nconst TOGGLE_ACTION = 'TOGGLE_ACTION';\nconst SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\nconst JUMP_TO_STATE = 'JUMP_TO_STATE';\nconst JUMP_TO_ACTION = 'JUMP_TO_ACTION';\nconst IMPORT_STATE = 'IMPORT_STATE';\nconst LOCK_CHANGES = 'LOCK_CHANGES';\nconst PAUSE_RECORDING = 'PAUSE_RECORDING';\nclass PerformAction {\n  constructor(action, timestamp) {\n    this.action = action;\n    this.timestamp = timestamp;\n    this.type = PERFORM_ACTION;\n    if (typeof action.type === 'undefined') {\n      throw new Error('Actions may not have an undefined \"type\" property. ' + 'Have you misspelled a constant?');\n    }\n  }\n}\nclass Refresh {\n  constructor() {\n    this.type = REFRESH;\n  }\n}\nclass Reset {\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n    this.type = RESET;\n  }\n}\nclass Rollback {\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n    this.type = ROLLBACK;\n  }\n}\nclass Commit {\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n    this.type = COMMIT;\n  }\n}\nclass Sweep {\n  constructor() {\n    this.type = SWEEP;\n  }\n}\nclass ToggleAction {\n  constructor(id) {\n    this.id = id;\n    this.type = TOGGLE_ACTION;\n  }\n}\nclass SetActionsActive {\n  constructor(start, end, active = true) {\n    this.start = start;\n    this.end = end;\n    this.active = active;\n    this.type = SET_ACTIONS_ACTIVE;\n  }\n}\nclass JumpToState {\n  constructor(index) {\n    this.index = index;\n    this.type = JUMP_TO_STATE;\n  }\n}\nclass JumpToAction {\n  constructor(actionId) {\n    this.actionId = actionId;\n    this.type = JUMP_TO_ACTION;\n  }\n}\nclass ImportState {\n  constructor(nextLiftedState) {\n    this.nextLiftedState = nextLiftedState;\n    this.type = IMPORT_STATE;\n  }\n}\nclass LockChanges {\n  constructor(status) {\n    this.status = status;\n    this.type = LOCK_CHANGES;\n  }\n}\nclass PauseRecording {\n  constructor(status) {\n    this.status = status;\n    this.type = PAUSE_RECORDING;\n  }\n}\n\n/**\n * Chrome extension documentation\n * @see https://github.com/reduxjs/redux-devtools/blob/main/extension/docs/API/Arguments.md\n * Firefox extension documentation\n * @see https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md\n */\nclass StoreDevtoolsConfig {\n  constructor() {\n    /**\n     * Maximum allowed actions to be stored in the history tree (default: `false`)\n     */\n    this.maxAge = false;\n  }\n}\nconst STORE_DEVTOOLS_CONFIG = new InjectionToken('@ngrx/store-devtools Options');\n/**\n * Used to provide a `StoreDevtoolsConfig` for the store-devtools.\n */\nconst INITIAL_OPTIONS = new InjectionToken('@ngrx/store-devtools Initial Config');\nfunction noMonitor() {\n  return null;\n}\nconst DEFAULT_NAME = 'NgRx Store DevTools';\nfunction createConfig(optionsInput) {\n  const DEFAULT_OPTIONS = {\n    maxAge: false,\n    monitor: noMonitor,\n    actionSanitizer: undefined,\n    stateSanitizer: undefined,\n    name: DEFAULT_NAME,\n    serialize: false,\n    logOnly: false,\n    autoPause: false,\n    trace: false,\n    traceLimit: 75,\n    // Add all features explicitly. This prevent buggy behavior for\n    // options like \"lock\" which might otherwise not show up.\n    features: {\n      pause: true,\n      lock: true,\n      persist: true,\n      export: true,\n      import: 'custom',\n      jump: true,\n      skip: true,\n      reorder: true,\n      dispatch: true,\n      test: true // Generate tests for the selected actions\n    }\n  };\n\n  const options = typeof optionsInput === 'function' ? optionsInput() : optionsInput;\n  const logOnly = options.logOnly ? {\n    pause: true,\n    export: true,\n    test: true\n  } : false;\n  const features = options.features || logOnly || DEFAULT_OPTIONS.features;\n  const config = Object.assign({}, DEFAULT_OPTIONS, {\n    features\n  }, options);\n  if (config.maxAge && config.maxAge < 2) {\n    throw new Error(`Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`);\n  }\n  return config;\n}\nfunction difference(first, second) {\n  return first.filter(item => second.indexOf(item) < 0);\n}\n/**\n * Provides an app's view into the state of the lifted store.\n */\nfunction unliftState(liftedState) {\n  const {\n    computedStates,\n    currentStateIndex\n  } = liftedState;\n  // At start up NgRx dispatches init actions,\n  // When these init actions are being filtered out by the predicate or safe/block list options\n  // we don't have a complete computed states yet.\n  // At this point it could happen that we're out of bounds, when this happens we fall back to the last known state\n  if (currentStateIndex >= computedStates.length) {\n    const {\n      state\n    } = computedStates[computedStates.length - 1];\n    return state;\n  }\n  const {\n    state\n  } = computedStates[currentStateIndex];\n  return state;\n}\nfunction unliftAction(liftedState) {\n  return liftedState.actionsById[liftedState.nextActionId - 1];\n}\n/**\n * Lifts an app's action into an action on the lifted store.\n */\nfunction liftAction(action) {\n  return new PerformAction(action, +Date.now());\n}\n/**\n * Sanitizes given actions with given function.\n */\nfunction sanitizeActions(actionSanitizer, actions) {\n  return Object.keys(actions).reduce((sanitizedActions, actionIdx) => {\n    const idx = Number(actionIdx);\n    sanitizedActions[idx] = sanitizeAction(actionSanitizer, actions[idx], idx);\n    return sanitizedActions;\n  }, {});\n}\n/**\n * Sanitizes given action with given function.\n */\nfunction sanitizeAction(actionSanitizer, action, actionIdx) {\n  return {\n    ...action,\n    action: actionSanitizer(action.action, actionIdx)\n  };\n}\n/**\n * Sanitizes given states with given function.\n */\nfunction sanitizeStates(stateSanitizer, states) {\n  return states.map((computedState, idx) => ({\n    state: sanitizeState(stateSanitizer, computedState.state, idx),\n    error: computedState.error\n  }));\n}\n/**\n * Sanitizes given state with given function.\n */\nfunction sanitizeState(stateSanitizer, state, stateIdx) {\n  return stateSanitizer(state, stateIdx);\n}\n/**\n * Read the config and tell if actions should be filtered\n */\nfunction shouldFilterActions(config) {\n  return config.predicate || config.actionsSafelist || config.actionsBlocklist;\n}\n/**\n * Return a full filtered lifted state\n */\nfunction filterLiftedState(liftedState, predicate, safelist, blocklist) {\n  const filteredStagedActionIds = [];\n  const filteredActionsById = {};\n  const filteredComputedStates = [];\n  liftedState.stagedActionIds.forEach((id, idx) => {\n    const liftedAction = liftedState.actionsById[id];\n    if (!liftedAction) return;\n    if (idx && isActionFiltered(liftedState.computedStates[idx], liftedAction, predicate, safelist, blocklist)) {\n      return;\n    }\n    filteredActionsById[id] = liftedAction;\n    filteredStagedActionIds.push(id);\n    filteredComputedStates.push(liftedState.computedStates[idx]);\n  });\n  return {\n    ...liftedState,\n    stagedActionIds: filteredStagedActionIds,\n    actionsById: filteredActionsById,\n    computedStates: filteredComputedStates\n  };\n}\n/**\n * Return true is the action should be ignored\n */\nfunction isActionFiltered(state, action, predicate, safelist, blockedlist) {\n  const predicateMatch = predicate && !predicate(state, action.action);\n  const safelistMatch = safelist && !action.action.type.match(safelist.map(s => escapeRegExp(s)).join('|'));\n  const blocklistMatch = blockedlist && action.action.type.match(blockedlist.map(s => escapeRegExp(s)).join('|'));\n  return predicateMatch || safelistMatch || blocklistMatch;\n}\n/**\n * Return string with escaped RegExp special characters\n * https://stackoverflow.com/a/6969486/1337347\n */\nfunction escapeRegExp(s) {\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nclass DevtoolsDispatcher extends ActionsSubject {}\n/** @nocollapse */\nDevtoolsDispatcher.ɵfac = /* @__PURE__ */function () {\n  let ɵDevtoolsDispatcher_BaseFactory;\n  return function DevtoolsDispatcher_Factory(t) {\n    return (ɵDevtoolsDispatcher_BaseFactory || (ɵDevtoolsDispatcher_BaseFactory = i0.ɵɵgetInheritedFactory(DevtoolsDispatcher)))(t || DevtoolsDispatcher);\n  };\n}();\n/** @nocollapse */\nDevtoolsDispatcher.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DevtoolsDispatcher,\n  factory: DevtoolsDispatcher.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DevtoolsDispatcher, [{\n    type: Injectable\n  }], null, null);\n})();\nconst ExtensionActionTypes = {\n  START: 'START',\n  DISPATCH: 'DISPATCH',\n  STOP: 'STOP',\n  ACTION: 'ACTION'\n};\nconst REDUX_DEVTOOLS_EXTENSION = new InjectionToken('@ngrx/store-devtools Redux Devtools Extension');\nclass DevtoolsExtension {\n  constructor(devtoolsExtension, config, dispatcher) {\n    this.config = config;\n    this.dispatcher = dispatcher;\n    this.devtoolsExtension = devtoolsExtension;\n    this.createActionStreams();\n  }\n  notify(action, state) {\n    if (!this.devtoolsExtension) {\n      return;\n    }\n    // Check to see if the action requires a full update of the liftedState.\n    // If it is a simple action generated by the user's app and the recording\n    // is not locked/paused, only send the action and the current state (fast).\n    //\n    // A full liftedState update (slow: serializes the entire liftedState) is\n    // only required when:\n    //   a) redux-devtools-extension fires the @@Init action (ignored by\n    //      @ngrx/store-devtools)\n    //   b) an action is generated by an @ngrx module (e.g. @ngrx/effects/init\n    //      or @ngrx/store/update-reducers)\n    //   c) the state has been recomputed due to time-traveling\n    //   d) any action that is not a PerformAction to err on the side of\n    //      caution.\n    if (action.type === PERFORM_ACTION) {\n      if (state.isLocked || state.isPaused) {\n        return;\n      }\n      const currentState = unliftState(state);\n      if (shouldFilterActions(this.config) && isActionFiltered(currentState, action, this.config.predicate, this.config.actionsSafelist, this.config.actionsBlocklist)) {\n        return;\n      }\n      const sanitizedState = this.config.stateSanitizer ? sanitizeState(this.config.stateSanitizer, currentState, state.currentStateIndex) : currentState;\n      const sanitizedAction = this.config.actionSanitizer ? sanitizeAction(this.config.actionSanitizer, action, state.nextActionId) : action;\n      this.sendToReduxDevtools(() => this.extensionConnection.send(sanitizedAction, sanitizedState));\n    } else {\n      // Requires full state update\n      const sanitizedLiftedState = {\n        ...state,\n        stagedActionIds: state.stagedActionIds,\n        actionsById: this.config.actionSanitizer ? sanitizeActions(this.config.actionSanitizer, state.actionsById) : state.actionsById,\n        computedStates: this.config.stateSanitizer ? sanitizeStates(this.config.stateSanitizer, state.computedStates) : state.computedStates\n      };\n      this.sendToReduxDevtools(() => this.devtoolsExtension.send(null, sanitizedLiftedState, this.getExtensionConfig(this.config)));\n    }\n  }\n  createChangesObservable() {\n    if (!this.devtoolsExtension) {\n      return EMPTY;\n    }\n    return new Observable(subscriber => {\n      const connection = this.devtoolsExtension.connect(this.getExtensionConfig(this.config));\n      this.extensionConnection = connection;\n      connection.init();\n      connection.subscribe(change => subscriber.next(change));\n      return connection.unsubscribe;\n    });\n  }\n  createActionStreams() {\n    // Listens to all changes\n    const changes$ = this.createChangesObservable().pipe(share());\n    // Listen for the start action\n    const start$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.START));\n    // Listen for the stop action\n    const stop$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.STOP));\n    // Listen for lifted actions\n    const liftedActions$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.DISPATCH), map(change => this.unwrapAction(change.payload)), concatMap(action => {\n      if (action.type === IMPORT_STATE) {\n        // State imports may happen in two situations:\n        // 1. Explicitly by user\n        // 2. User activated the \"persist state accross reloads\" option\n        //    and now the state is imported during reload.\n        // Because of option 2, we need to give possible\n        // lazy loaded reducers time to instantiate.\n        // As soon as there is no UPDATE action within 1 second,\n        // it is assumed that all reducers are loaded.\n        return this.dispatcher.pipe(filter(action => action.type === UPDATE), timeout(1000), debounceTime(1000), map(() => action), catchError(() => of(action)), take(1));\n      } else {\n        return of(action);\n      }\n    }));\n    // Listen for unlifted actions\n    const actions$ = changes$.pipe(filter(change => change.type === ExtensionActionTypes.ACTION), map(change => this.unwrapAction(change.payload)));\n    const actionsUntilStop$ = actions$.pipe(takeUntil(stop$));\n    const liftedUntilStop$ = liftedActions$.pipe(takeUntil(stop$));\n    this.start$ = start$.pipe(takeUntil(stop$));\n    // Only take the action sources between the start/stop events\n    this.actions$ = this.start$.pipe(switchMap(() => actionsUntilStop$));\n    this.liftedActions$ = this.start$.pipe(switchMap(() => liftedUntilStop$));\n  }\n  unwrapAction(action) {\n    return typeof action === 'string' ? eval(`(${action})`) : action;\n  }\n  getExtensionConfig(config) {\n    const extensionOptions = {\n      name: config.name,\n      features: config.features,\n      serialize: config.serialize,\n      autoPause: config.autoPause ?? false,\n      trace: config.trace ?? false,\n      traceLimit: config.traceLimit ?? 75\n      // The action/state sanitizers are not added to the config\n      // because sanitation is done in this class already.\n      // It is done before sending it to the devtools extension for consistency:\n      // - If we call extensionConnection.send(...),\n      //   the extension would call the sanitizers.\n      // - If we call devtoolsExtension.send(...) (aka full state update),\n      //   the extension would NOT call the sanitizers, so we have to do it ourselves.\n    };\n\n    if (config.maxAge !== false /* support === 0 */) {\n      extensionOptions.maxAge = config.maxAge;\n    }\n    return extensionOptions;\n  }\n  sendToReduxDevtools(send) {\n    try {\n      send();\n    } catch (err) {\n      console.warn('@ngrx/store-devtools: something went wrong inside the redux devtools', err);\n    }\n  }\n}\n/** @nocollapse */\nDevtoolsExtension.ɵfac = function DevtoolsExtension_Factory(t) {\n  return new (t || DevtoolsExtension)(i0.ɵɵinject(REDUX_DEVTOOLS_EXTENSION), i0.ɵɵinject(STORE_DEVTOOLS_CONFIG), i0.ɵɵinject(DevtoolsDispatcher));\n};\n/** @nocollapse */\nDevtoolsExtension.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: DevtoolsExtension,\n  factory: DevtoolsExtension.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(DevtoolsExtension, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [REDUX_DEVTOOLS_EXTENSION]\n      }]\n    }, {\n      type: StoreDevtoolsConfig,\n      decorators: [{\n        type: Inject,\n        args: [STORE_DEVTOOLS_CONFIG]\n      }]\n    }, {\n      type: DevtoolsDispatcher\n    }];\n  }, null);\n})();\nconst INIT_ACTION = {\n  type: INIT\n};\nconst RECOMPUTE = '@ngrx/store-devtools/recompute';\nconst RECOMPUTE_ACTION = {\n  type: RECOMPUTE\n};\n/**\n * Computes the next entry in the log by applying an action.\n */\nfunction computeNextEntry(reducer, action, state, error, errorHandler) {\n  if (error) {\n    return {\n      state,\n      error: 'Interrupted by an error up the chain'\n    };\n  }\n  let nextState = state;\n  let nextError;\n  try {\n    nextState = reducer(state, action);\n  } catch (err) {\n    nextError = err.toString();\n    errorHandler.handleError(err);\n  }\n  return {\n    state: nextState,\n    error: nextError\n  };\n}\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\nfunction recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused) {\n  // Optimization: exit early and return the same reference\n  // if we know nothing could have changed.\n  if (minInvalidatedStateIndex >= computedStates.length && computedStates.length === stagedActionIds.length) {\n    return computedStates;\n  }\n  const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n  // If the recording is paused, recompute all states up until the pause state,\n  // else recompute all states.\n  const lastIncludedActionId = stagedActionIds.length - (isPaused ? 1 : 0);\n  for (let i = minInvalidatedStateIndex; i < lastIncludedActionId; i++) {\n    const actionId = stagedActionIds[i];\n    const action = actionsById[actionId].action;\n    const previousEntry = nextComputedStates[i - 1];\n    const previousState = previousEntry ? previousEntry.state : committedState;\n    const previousError = previousEntry ? previousEntry.error : undefined;\n    const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n    const entry = shouldSkip ? previousEntry : computeNextEntry(reducer, action, previousState, previousError, errorHandler);\n    nextComputedStates.push(entry);\n  }\n  // If the recording is paused, the last state will not be recomputed,\n  // because it's essentially not part of the state history.\n  if (isPaused) {\n    nextComputedStates.push(computedStates[computedStates.length - 1]);\n  }\n  return nextComputedStates;\n}\nfunction liftInitialState(initialCommittedState, monitorReducer) {\n  return {\n    monitorState: monitorReducer(undefined, {}),\n    nextActionId: 1,\n    actionsById: {\n      0: liftAction(INIT_ACTION)\n    },\n    stagedActionIds: [0],\n    skippedActionIds: [],\n    committedState: initialCommittedState,\n    currentStateIndex: 0,\n    computedStates: [],\n    isLocked: false,\n    isPaused: false\n  };\n}\n/**\n * Creates a history state reducer from an app's reducer.\n */\nfunction liftReducerWith(initialCommittedState, initialLiftedState, errorHandler, monitorReducer, options = {}) {\n  /**\n   * Manages how the history actions modify the history state.\n   */\n  return reducer => (liftedState, liftedAction) => {\n    let {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n      isLocked,\n      isPaused\n    } = liftedState || initialLiftedState;\n    if (!liftedState) {\n      // Prevent mutating initialLiftedState\n      actionsById = Object.create(actionsById);\n    }\n    function commitExcessActions(n) {\n      // Auto-commits n-number of excess actions.\n      let excess = n;\n      let idsToDelete = stagedActionIds.slice(1, excess + 1);\n      for (let i = 0; i < idsToDelete.length; i++) {\n        if (computedStates[i + 1].error) {\n          // Stop if error is found. Commit actions up to error.\n          excess = i;\n          idsToDelete = stagedActionIds.slice(1, excess + 1);\n          break;\n        } else {\n          delete actionsById[idsToDelete[i]];\n        }\n      }\n      skippedActionIds = skippedActionIds.filter(id => idsToDelete.indexOf(id) === -1);\n      stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n      committedState = computedStates[excess].state;\n      computedStates = computedStates.slice(excess);\n      currentStateIndex = currentStateIndex > excess ? currentStateIndex - excess : 0;\n    }\n    function commitChanges() {\n      // Consider the last committed state the new starting point.\n      // Squash any staged actions into a single committed state.\n      actionsById = {\n        0: liftAction(INIT_ACTION)\n      };\n      nextActionId = 1;\n      stagedActionIds = [0];\n      skippedActionIds = [];\n      committedState = computedStates[currentStateIndex].state;\n      currentStateIndex = 0;\n      computedStates = [];\n    }\n    // By default, aggressively recompute every state whatever happens.\n    // This has O(n) performance, so we'll override this to a sensible\n    // value whenever we feel like we don't have to recompute the states.\n    let minInvalidatedStateIndex = 0;\n    switch (liftedAction.type) {\n      case LOCK_CHANGES:\n        {\n          isLocked = liftedAction.status;\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n      case PAUSE_RECORDING:\n        {\n          isPaused = liftedAction.status;\n          if (isPaused) {\n            // Add a pause action to signal the devtools-user the recording is paused.\n            // The corresponding state will be overwritten on each update to always contain\n            // the latest state (see Actions.PERFORM_ACTION).\n            stagedActionIds = [...stagedActionIds, nextActionId];\n            actionsById[nextActionId] = new PerformAction({\n              type: '@ngrx/devtools/pause'\n            }, +Date.now());\n            nextActionId++;\n            minInvalidatedStateIndex = stagedActionIds.length - 1;\n            computedStates = computedStates.concat(computedStates[computedStates.length - 1]);\n            if (currentStateIndex === stagedActionIds.length - 2) {\n              currentStateIndex++;\n            }\n            minInvalidatedStateIndex = Infinity;\n          } else {\n            commitChanges();\n          }\n          break;\n        }\n      case RESET:\n        {\n          // Get back to the state the store was created with.\n          actionsById = {\n            0: liftAction(INIT_ACTION)\n          };\n          nextActionId = 1;\n          stagedActionIds = [0];\n          skippedActionIds = [];\n          committedState = initialCommittedState;\n          currentStateIndex = 0;\n          computedStates = [];\n          break;\n        }\n      case COMMIT:\n        {\n          commitChanges();\n          break;\n        }\n      case ROLLBACK:\n        {\n          // Forget about any staged actions.\n          // Start again from the last committed state.\n          actionsById = {\n            0: liftAction(INIT_ACTION)\n          };\n          nextActionId = 1;\n          stagedActionIds = [0];\n          skippedActionIds = [];\n          currentStateIndex = 0;\n          computedStates = [];\n          break;\n        }\n      case TOGGLE_ACTION:\n        {\n          // Toggle whether an action with given ID is skipped.\n          // Being skipped means it is a no-op during the computation.\n          const {\n            id: actionId\n          } = liftedAction;\n          const index = skippedActionIds.indexOf(actionId);\n          if (index === -1) {\n            skippedActionIds = [actionId, ...skippedActionIds];\n          } else {\n            skippedActionIds = skippedActionIds.filter(id => id !== actionId);\n          }\n          // Optimization: we know history before this action hasn't changed\n          minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n          break;\n        }\n      case SET_ACTIONS_ACTIVE:\n        {\n          // Toggle whether an action with given ID is skipped.\n          // Being skipped means it is a no-op during the computation.\n          const {\n            start,\n            end,\n            active\n          } = liftedAction;\n          const actionIds = [];\n          for (let i = start; i < end; i++) actionIds.push(i);\n          if (active) {\n            skippedActionIds = difference(skippedActionIds, actionIds);\n          } else {\n            skippedActionIds = [...skippedActionIds, ...actionIds];\n          }\n          // Optimization: we know history before this action hasn't changed\n          minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n          break;\n        }\n      case JUMP_TO_STATE:\n        {\n          // Without recomputing anything, move the pointer that tell us\n          // which state is considered the current one. Useful for sliders.\n          currentStateIndex = liftedAction.index;\n          // Optimization: we know the history has not changed.\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n      case JUMP_TO_ACTION:\n        {\n          // Jumps to a corresponding state to a specific action.\n          // Useful when filtering actions.\n          const index = stagedActionIds.indexOf(liftedAction.actionId);\n          if (index !== -1) currentStateIndex = index;\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n      case SWEEP:\n        {\n          // Forget any actions that are currently being skipped.\n          stagedActionIds = difference(stagedActionIds, skippedActionIds);\n          skippedActionIds = [];\n          currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);\n          break;\n        }\n      case PERFORM_ACTION:\n        {\n          // Ignore action and return state as is if recording is locked\n          if (isLocked) {\n            return liftedState || initialLiftedState;\n          }\n          if (isPaused || liftedState && isActionFiltered(liftedState.computedStates[currentStateIndex], liftedAction, options.predicate, options.actionsSafelist, options.actionsBlocklist)) {\n            // If recording is paused or if the action should be ignored, overwrite the last state\n            // (corresponds to the pause action) and keep everything else as is.\n            // This way, the app gets the new current state while the devtools\n            // do not record another action.\n            const lastState = computedStates[computedStates.length - 1];\n            computedStates = [...computedStates.slice(0, -1), computeNextEntry(reducer, liftedAction.action, lastState.state, lastState.error, errorHandler)];\n            minInvalidatedStateIndex = Infinity;\n            break;\n          }\n          // Auto-commit as new actions come in.\n          if (options.maxAge && stagedActionIds.length === options.maxAge) {\n            commitExcessActions(1);\n          }\n          if (currentStateIndex === stagedActionIds.length - 1) {\n            currentStateIndex++;\n          }\n          const actionId = nextActionId++;\n          // Mutation! This is the hottest path, and we optimize on purpose.\n          // It is safe because we set a new key in a cache dictionary.\n          actionsById[actionId] = liftedAction;\n          stagedActionIds = [...stagedActionIds, actionId];\n          // Optimization: we know that only the new action needs computing.\n          minInvalidatedStateIndex = stagedActionIds.length - 1;\n          break;\n        }\n      case IMPORT_STATE:\n        {\n          // Completely replace everything.\n          ({\n            monitorState,\n            actionsById,\n            nextActionId,\n            stagedActionIds,\n            skippedActionIds,\n            committedState,\n            currentStateIndex,\n            computedStates,\n            isLocked,\n            isPaused\n          } = liftedAction.nextLiftedState);\n          break;\n        }\n      case INIT:\n        {\n          // Always recompute states on hot reload and init.\n          minInvalidatedStateIndex = 0;\n          if (options.maxAge && stagedActionIds.length > options.maxAge) {\n            // States must be recomputed before committing excess.\n            computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n            commitExcessActions(stagedActionIds.length - options.maxAge);\n            // Avoid double computation.\n            minInvalidatedStateIndex = Infinity;\n          }\n          break;\n        }\n      case UPDATE:\n        {\n          const stateHasErrors = computedStates.filter(state => state.error).length > 0;\n          if (stateHasErrors) {\n            // Recompute all states\n            minInvalidatedStateIndex = 0;\n            if (options.maxAge && stagedActionIds.length > options.maxAge) {\n              // States must be recomputed before committing excess.\n              computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n              commitExcessActions(stagedActionIds.length - options.maxAge);\n              // Avoid double computation.\n              minInvalidatedStateIndex = Infinity;\n            }\n          } else {\n            // If not paused/locked, add a new action to signal devtools-user\n            // that there was a reducer update.\n            if (!isPaused && !isLocked) {\n              if (currentStateIndex === stagedActionIds.length - 1) {\n                currentStateIndex++;\n              }\n              // Add a new action to only recompute state\n              const actionId = nextActionId++;\n              actionsById[actionId] = new PerformAction(liftedAction, +Date.now());\n              stagedActionIds = [...stagedActionIds, actionId];\n              minInvalidatedStateIndex = stagedActionIds.length - 1;\n              computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n            }\n            // Recompute state history with latest reducer and update action\n            computedStates = computedStates.map(cmp => ({\n              ...cmp,\n              state: reducer(cmp.state, RECOMPUTE_ACTION)\n            }));\n            currentStateIndex = stagedActionIds.length - 1;\n            if (options.maxAge && stagedActionIds.length > options.maxAge) {\n              commitExcessActions(stagedActionIds.length - options.maxAge);\n            }\n            // Avoid double computation.\n            minInvalidatedStateIndex = Infinity;\n          }\n          break;\n        }\n      default:\n        {\n          // If the action is not recognized, it's a monitor action.\n          // Optimization: a monitor action can't change history.\n          minInvalidatedStateIndex = Infinity;\n          break;\n        }\n    }\n    computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n    monitorState = monitorReducer(monitorState, liftedAction);\n    return {\n      monitorState,\n      actionsById,\n      nextActionId,\n      stagedActionIds,\n      skippedActionIds,\n      committedState,\n      currentStateIndex,\n      computedStates,\n      isLocked,\n      isPaused\n    };\n  };\n}\nclass StoreDevtools {\n  constructor(dispatcher, actions$, reducers$, extension, scannedActions, errorHandler, initialState, config) {\n    const liftedInitialState = liftInitialState(initialState, config.monitor);\n    const liftReducer = liftReducerWith(initialState, liftedInitialState, errorHandler, config.monitor, config);\n    const liftedAction$ = merge(merge(actions$.asObservable().pipe(skip(1)), extension.actions$).pipe(map(liftAction)), dispatcher, extension.liftedActions$).pipe(observeOn(queueScheduler));\n    const liftedReducer$ = reducers$.pipe(map(liftReducer));\n    const liftedStateSubject = new ReplaySubject(1);\n    const liftedStateSubscription = liftedAction$.pipe(withLatestFrom(liftedReducer$), scan(({\n      state: liftedState\n    }, [action, reducer]) => {\n      let reducedLiftedState = reducer(liftedState, action);\n      // On full state update\n      // If we have actions filters, we must filter completely our lifted state to be sync with the extension\n      if (action.type !== PERFORM_ACTION && shouldFilterActions(config)) {\n        reducedLiftedState = filterLiftedState(reducedLiftedState, config.predicate, config.actionsSafelist, config.actionsBlocklist);\n      }\n      // Extension should be sent the sanitized lifted state\n      extension.notify(action, reducedLiftedState);\n      return {\n        state: reducedLiftedState,\n        action\n      };\n    }, {\n      state: liftedInitialState,\n      action: null\n    })).subscribe(({\n      state,\n      action\n    }) => {\n      liftedStateSubject.next(state);\n      if (action.type === PERFORM_ACTION) {\n        const unliftedAction = action.action;\n        scannedActions.next(unliftedAction);\n      }\n    });\n    const extensionStartSubscription = extension.start$.subscribe(() => {\n      this.refresh();\n    });\n    const liftedState$ = liftedStateSubject.asObservable();\n    const state$ = liftedState$.pipe(map(unliftState));\n    this.extensionStartSubscription = extensionStartSubscription;\n    this.stateSubscription = liftedStateSubscription;\n    this.dispatcher = dispatcher;\n    this.liftedState = liftedState$;\n    this.state = state$;\n  }\n  dispatch(action) {\n    this.dispatcher.next(action);\n  }\n  next(action) {\n    this.dispatcher.next(action);\n  }\n  error(error) {}\n  complete() {}\n  performAction(action) {\n    this.dispatch(new PerformAction(action, +Date.now()));\n  }\n  refresh() {\n    this.dispatch(new Refresh());\n  }\n  reset() {\n    this.dispatch(new Reset(+Date.now()));\n  }\n  rollback() {\n    this.dispatch(new Rollback(+Date.now()));\n  }\n  commit() {\n    this.dispatch(new Commit(+Date.now()));\n  }\n  sweep() {\n    this.dispatch(new Sweep());\n  }\n  toggleAction(id) {\n    this.dispatch(new ToggleAction(id));\n  }\n  jumpToAction(actionId) {\n    this.dispatch(new JumpToAction(actionId));\n  }\n  jumpToState(index) {\n    this.dispatch(new JumpToState(index));\n  }\n  importState(nextLiftedState) {\n    this.dispatch(new ImportState(nextLiftedState));\n  }\n  lockChanges(status) {\n    this.dispatch(new LockChanges(status));\n  }\n  pauseRecording(status) {\n    this.dispatch(new PauseRecording(status));\n  }\n}\n/** @nocollapse */\nStoreDevtools.ɵfac = function StoreDevtools_Factory(t) {\n  return new (t || StoreDevtools)(i0.ɵɵinject(DevtoolsDispatcher), i0.ɵɵinject(i2.ActionsSubject), i0.ɵɵinject(i2.ReducerObservable), i0.ɵɵinject(DevtoolsExtension), i0.ɵɵinject(i2.ScannedActionsSubject), i0.ɵɵinject(i0.ErrorHandler), i0.ɵɵinject(INITIAL_STATE), i0.ɵɵinject(STORE_DEVTOOLS_CONFIG));\n};\n/** @nocollapse */\nStoreDevtools.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StoreDevtools,\n  factory: StoreDevtools.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreDevtools, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: DevtoolsDispatcher\n    }, {\n      type: i2.ActionsSubject\n    }, {\n      type: i2.ReducerObservable\n    }, {\n      type: DevtoolsExtension\n    }, {\n      type: i2.ScannedActionsSubject\n    }, {\n      type: i0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [INITIAL_STATE]\n      }]\n    }, {\n      type: StoreDevtoolsConfig,\n      decorators: [{\n        type: Inject,\n        args: [STORE_DEVTOOLS_CONFIG]\n      }]\n    }];\n  }, null);\n})();\nconst IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken('@ngrx/store-devtools Is Devtools Extension or Monitor Present');\nfunction createIsExtensionOrMonitorPresent(extension, config) {\n  return Boolean(extension) || config.monitor !== noMonitor;\n}\nfunction createReduxDevtoolsExtension() {\n  const extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n  if (typeof window === 'object' && typeof window[extensionKey] !== 'undefined') {\n    return window[extensionKey];\n  } else {\n    return null;\n  }\n}\n/**\n * Provides developer tools and instrumentation for `Store`.\n *\n * @usageNotes\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideStoreDevtools({\n *       maxAge: 25,\n *       logOnly: !isDevMode(),\n *     }),\n *   ],\n * });\n * ```\n */\nfunction provideStoreDevtools(options = {}) {\n  return makeEnvironmentProviders([DevtoolsExtension, DevtoolsDispatcher, StoreDevtools, {\n    provide: INITIAL_OPTIONS,\n    useValue: options\n  }, {\n    provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n    deps: [REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG],\n    useFactory: createIsExtensionOrMonitorPresent\n  }, {\n    provide: REDUX_DEVTOOLS_EXTENSION,\n    useFactory: createReduxDevtoolsExtension\n  }, {\n    provide: STORE_DEVTOOLS_CONFIG,\n    deps: [INITIAL_OPTIONS],\n    useFactory: createConfig\n  }, {\n    provide: StateObservable,\n    deps: [StoreDevtools],\n    useFactory: createStateObservable\n  }, {\n    provide: ReducerManagerDispatcher,\n    useExisting: DevtoolsDispatcher\n  }]);\n}\nfunction createStateObservable(devtools) {\n  return devtools.state;\n}\nclass StoreDevtoolsModule {\n  static instrument(options = {}) {\n    return {\n      ngModule: StoreDevtoolsModule,\n      providers: [provideStoreDevtools(options)]\n    };\n  }\n}\n/** @nocollapse */\nStoreDevtoolsModule.ɵfac = function StoreDevtoolsModule_Factory(t) {\n  return new (t || StoreDevtoolsModule)();\n};\n/** @nocollapse */\nStoreDevtoolsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: StoreDevtoolsModule\n});\n/** @nocollapse */\nStoreDevtoolsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreDevtoolsModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_OPTIONS, RECOMPUTE, REDUX_DEVTOOLS_EXTENSION, StoreDevtools, StoreDevtoolsConfig, StoreDevtoolsModule, provideStoreDevtools };\n//# sourceMappingURL=ngrx-store-devtools.mjs.map","map":{"version":3,"names":["i0","InjectionToken","Injectable","Inject","makeEnvironmentProviders","NgModule","i2","ActionsSubject","UPDATE","INIT","INITIAL_STATE","StateObservable","ReducerManagerDispatcher","EMPTY","Observable","of","merge","queueScheduler","ReplaySubject","share","filter","map","concatMap","timeout","debounceTime","catchError","take","takeUntil","switchMap","skip","observeOn","withLatestFrom","scan","PERFORM_ACTION","REFRESH","RESET","ROLLBACK","COMMIT","SWEEP","TOGGLE_ACTION","SET_ACTIONS_ACTIVE","JUMP_TO_STATE","JUMP_TO_ACTION","IMPORT_STATE","LOCK_CHANGES","PAUSE_RECORDING","PerformAction","constructor","action","timestamp","type","Error","Refresh","Reset","Rollback","Commit","Sweep","ToggleAction","id","SetActionsActive","start","end","active","JumpToState","index","JumpToAction","actionId","ImportState","nextLiftedState","LockChanges","status","PauseRecording","StoreDevtoolsConfig","maxAge","STORE_DEVTOOLS_CONFIG","INITIAL_OPTIONS","noMonitor","DEFAULT_NAME","createConfig","optionsInput","DEFAULT_OPTIONS","monitor","actionSanitizer","undefined","stateSanitizer","name","serialize","logOnly","autoPause","trace","traceLimit","features","pause","lock","persist","export","import","jump","reorder","dispatch","test","options","config","Object","assign","difference","first","second","item","indexOf","unliftState","liftedState","computedStates","currentStateIndex","length","state","unliftAction","actionsById","nextActionId","liftAction","Date","now","sanitizeActions","actions","keys","reduce","sanitizedActions","actionIdx","idx","Number","sanitizeAction","sanitizeStates","states","computedState","sanitizeState","error","stateIdx","shouldFilterActions","predicate","actionsSafelist","actionsBlocklist","filterLiftedState","safelist","blocklist","filteredStagedActionIds","filteredActionsById","filteredComputedStates","stagedActionIds","forEach","liftedAction","isActionFiltered","push","blockedlist","predicateMatch","safelistMatch","match","s","escapeRegExp","join","blocklistMatch","replace","DevtoolsDispatcher","ɵfac","ɵprov","ExtensionActionTypes","START","DISPATCH","STOP","ACTION","REDUX_DEVTOOLS_EXTENSION","DevtoolsExtension","devtoolsExtension","dispatcher","createActionStreams","notify","isLocked","isPaused","currentState","sanitizedState","sanitizedAction","sendToReduxDevtools","extensionConnection","send","sanitizedLiftedState","getExtensionConfig","createChangesObservable","subscriber","connection","connect","init","subscribe","change","next","unsubscribe","changes$","pipe","start$","stop$","liftedActions$","unwrapAction","payload","actions$","actionsUntilStop$","liftedUntilStop$","eval","extensionOptions","err","console","warn","decorators","args","INIT_ACTION","RECOMPUTE","RECOMPUTE_ACTION","computeNextEntry","reducer","errorHandler","nextState","nextError","toString","handleError","recomputeStates","minInvalidatedStateIndex","committedState","skippedActionIds","nextComputedStates","slice","lastIncludedActionId","i","previousEntry","previousState","previousError","shouldSkip","entry","liftInitialState","initialCommittedState","monitorReducer","monitorState","liftReducerWith","initialLiftedState","create","commitExcessActions","n","excess","idsToDelete","commitChanges","Infinity","concat","actionIds","Math","min","lastState","stateHasErrors","cmp","StoreDevtools","reducers$","extension","scannedActions","initialState","liftedInitialState","liftReducer","liftedAction$","asObservable","liftedReducer$","liftedStateSubject","liftedStateSubscription","reducedLiftedState","unliftedAction","extensionStartSubscription","refresh","liftedState$","state$","stateSubscription","complete","performAction","reset","rollback","commit","sweep","toggleAction","jumpToAction","jumpToState","importState","lockChanges","pauseRecording","ReducerObservable","ScannedActionsSubject","ErrorHandler","IS_EXTENSION_OR_MONITOR_PRESENT","createIsExtensionOrMonitorPresent","Boolean","createReduxDevtoolsExtension","extensionKey","window","provideStoreDevtools","provide","useValue","deps","useFactory","createStateObservable","useExisting","devtools","StoreDevtoolsModule","instrument","ngModule","providers","ɵmod","ɵinj"],"sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/node_modules/@ngrx/store-devtools/fesm2020/ngrx-store-devtools.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, makeEnvironmentProviders, NgModule } from '@angular/core';\nimport * as i2 from '@ngrx/store';\nimport { ActionsSubject, UPDATE, INIT, INITIAL_STATE, StateObservable, ReducerManagerDispatcher } from '@ngrx/store';\nimport { EMPTY, Observable, of, merge, queueScheduler, ReplaySubject } from 'rxjs';\nimport { share, filter, map, concatMap, timeout, debounceTime, catchError, take, takeUntil, switchMap, skip, observeOn, withLatestFrom, scan } from 'rxjs/operators';\n\nconst PERFORM_ACTION = 'PERFORM_ACTION';\nconst REFRESH = 'REFRESH';\nconst RESET = 'RESET';\nconst ROLLBACK = 'ROLLBACK';\nconst COMMIT = 'COMMIT';\nconst SWEEP = 'SWEEP';\nconst TOGGLE_ACTION = 'TOGGLE_ACTION';\nconst SET_ACTIONS_ACTIVE = 'SET_ACTIONS_ACTIVE';\nconst JUMP_TO_STATE = 'JUMP_TO_STATE';\nconst JUMP_TO_ACTION = 'JUMP_TO_ACTION';\nconst IMPORT_STATE = 'IMPORT_STATE';\nconst LOCK_CHANGES = 'LOCK_CHANGES';\nconst PAUSE_RECORDING = 'PAUSE_RECORDING';\nclass PerformAction {\n    constructor(action, timestamp) {\n        this.action = action;\n        this.timestamp = timestamp;\n        this.type = PERFORM_ACTION;\n        if (typeof action.type === 'undefined') {\n            throw new Error('Actions may not have an undefined \"type\" property. ' +\n                'Have you misspelled a constant?');\n        }\n    }\n}\nclass Refresh {\n    constructor() {\n        this.type = REFRESH;\n    }\n}\nclass Reset {\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = RESET;\n    }\n}\nclass Rollback {\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = ROLLBACK;\n    }\n}\nclass Commit {\n    constructor(timestamp) {\n        this.timestamp = timestamp;\n        this.type = COMMIT;\n    }\n}\nclass Sweep {\n    constructor() {\n        this.type = SWEEP;\n    }\n}\nclass ToggleAction {\n    constructor(id) {\n        this.id = id;\n        this.type = TOGGLE_ACTION;\n    }\n}\nclass SetActionsActive {\n    constructor(start, end, active = true) {\n        this.start = start;\n        this.end = end;\n        this.active = active;\n        this.type = SET_ACTIONS_ACTIVE;\n    }\n}\nclass JumpToState {\n    constructor(index) {\n        this.index = index;\n        this.type = JUMP_TO_STATE;\n    }\n}\nclass JumpToAction {\n    constructor(actionId) {\n        this.actionId = actionId;\n        this.type = JUMP_TO_ACTION;\n    }\n}\nclass ImportState {\n    constructor(nextLiftedState) {\n        this.nextLiftedState = nextLiftedState;\n        this.type = IMPORT_STATE;\n    }\n}\nclass LockChanges {\n    constructor(status) {\n        this.status = status;\n        this.type = LOCK_CHANGES;\n    }\n}\nclass PauseRecording {\n    constructor(status) {\n        this.status = status;\n        this.type = PAUSE_RECORDING;\n    }\n}\n\n/**\n * Chrome extension documentation\n * @see https://github.com/reduxjs/redux-devtools/blob/main/extension/docs/API/Arguments.md\n * Firefox extension documentation\n * @see https://github.com/zalmoxisus/redux-devtools-extension/blob/master/docs/API/Arguments.md\n */\nclass StoreDevtoolsConfig {\n    constructor() {\n        /**\n         * Maximum allowed actions to be stored in the history tree (default: `false`)\n         */\n        this.maxAge = false;\n    }\n}\nconst STORE_DEVTOOLS_CONFIG = new InjectionToken('@ngrx/store-devtools Options');\n/**\n * Used to provide a `StoreDevtoolsConfig` for the store-devtools.\n */\nconst INITIAL_OPTIONS = new InjectionToken('@ngrx/store-devtools Initial Config');\nfunction noMonitor() {\n    return null;\n}\nconst DEFAULT_NAME = 'NgRx Store DevTools';\nfunction createConfig(optionsInput) {\n    const DEFAULT_OPTIONS = {\n        maxAge: false,\n        monitor: noMonitor,\n        actionSanitizer: undefined,\n        stateSanitizer: undefined,\n        name: DEFAULT_NAME,\n        serialize: false,\n        logOnly: false,\n        autoPause: false,\n        trace: false,\n        traceLimit: 75,\n        // Add all features explicitly. This prevent buggy behavior for\n        // options like \"lock\" which might otherwise not show up.\n        features: {\n            pause: true,\n            lock: true,\n            persist: true,\n            export: true,\n            import: 'custom',\n            jump: true,\n            skip: true,\n            reorder: true,\n            dispatch: true,\n            test: true, // Generate tests for the selected actions\n        },\n    };\n    const options = typeof optionsInput === 'function' ? optionsInput() : optionsInput;\n    const logOnly = options.logOnly\n        ? { pause: true, export: true, test: true }\n        : false;\n    const features = options.features || logOnly || DEFAULT_OPTIONS.features;\n    const config = Object.assign({}, DEFAULT_OPTIONS, { features }, options);\n    if (config.maxAge && config.maxAge < 2) {\n        throw new Error(`Devtools 'maxAge' cannot be less than 2, got ${config.maxAge}`);\n    }\n    return config;\n}\n\nfunction difference(first, second) {\n    return first.filter((item) => second.indexOf(item) < 0);\n}\n/**\n * Provides an app's view into the state of the lifted store.\n */\nfunction unliftState(liftedState) {\n    const { computedStates, currentStateIndex } = liftedState;\n    // At start up NgRx dispatches init actions,\n    // When these init actions are being filtered out by the predicate or safe/block list options\n    // we don't have a complete computed states yet.\n    // At this point it could happen that we're out of bounds, when this happens we fall back to the last known state\n    if (currentStateIndex >= computedStates.length) {\n        const { state } = computedStates[computedStates.length - 1];\n        return state;\n    }\n    const { state } = computedStates[currentStateIndex];\n    return state;\n}\nfunction unliftAction(liftedState) {\n    return liftedState.actionsById[liftedState.nextActionId - 1];\n}\n/**\n * Lifts an app's action into an action on the lifted store.\n */\nfunction liftAction(action) {\n    return new PerformAction(action, +Date.now());\n}\n/**\n * Sanitizes given actions with given function.\n */\nfunction sanitizeActions(actionSanitizer, actions) {\n    return Object.keys(actions).reduce((sanitizedActions, actionIdx) => {\n        const idx = Number(actionIdx);\n        sanitizedActions[idx] = sanitizeAction(actionSanitizer, actions[idx], idx);\n        return sanitizedActions;\n    }, {});\n}\n/**\n * Sanitizes given action with given function.\n */\nfunction sanitizeAction(actionSanitizer, action, actionIdx) {\n    return {\n        ...action,\n        action: actionSanitizer(action.action, actionIdx),\n    };\n}\n/**\n * Sanitizes given states with given function.\n */\nfunction sanitizeStates(stateSanitizer, states) {\n    return states.map((computedState, idx) => ({\n        state: sanitizeState(stateSanitizer, computedState.state, idx),\n        error: computedState.error,\n    }));\n}\n/**\n * Sanitizes given state with given function.\n */\nfunction sanitizeState(stateSanitizer, state, stateIdx) {\n    return stateSanitizer(state, stateIdx);\n}\n/**\n * Read the config and tell if actions should be filtered\n */\nfunction shouldFilterActions(config) {\n    return config.predicate || config.actionsSafelist || config.actionsBlocklist;\n}\n/**\n * Return a full filtered lifted state\n */\nfunction filterLiftedState(liftedState, predicate, safelist, blocklist) {\n    const filteredStagedActionIds = [];\n    const filteredActionsById = {};\n    const filteredComputedStates = [];\n    liftedState.stagedActionIds.forEach((id, idx) => {\n        const liftedAction = liftedState.actionsById[id];\n        if (!liftedAction)\n            return;\n        if (idx &&\n            isActionFiltered(liftedState.computedStates[idx], liftedAction, predicate, safelist, blocklist)) {\n            return;\n        }\n        filteredActionsById[id] = liftedAction;\n        filteredStagedActionIds.push(id);\n        filteredComputedStates.push(liftedState.computedStates[idx]);\n    });\n    return {\n        ...liftedState,\n        stagedActionIds: filteredStagedActionIds,\n        actionsById: filteredActionsById,\n        computedStates: filteredComputedStates,\n    };\n}\n/**\n * Return true is the action should be ignored\n */\nfunction isActionFiltered(state, action, predicate, safelist, blockedlist) {\n    const predicateMatch = predicate && !predicate(state, action.action);\n    const safelistMatch = safelist &&\n        !action.action.type.match(safelist.map((s) => escapeRegExp(s)).join('|'));\n    const blocklistMatch = blockedlist &&\n        action.action.type.match(blockedlist.map((s) => escapeRegExp(s)).join('|'));\n    return predicateMatch || safelistMatch || blocklistMatch;\n}\n/**\n * Return string with escaped RegExp special characters\n * https://stackoverflow.com/a/6969486/1337347\n */\nfunction escapeRegExp(s) {\n    return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nclass DevtoolsDispatcher extends ActionsSubject {\n}\n/** @nocollapse */ DevtoolsDispatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: DevtoolsDispatcher, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ DevtoolsDispatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: DevtoolsDispatcher });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: DevtoolsDispatcher, decorators: [{\n            type: Injectable\n        }] });\n\nconst ExtensionActionTypes = {\n    START: 'START',\n    DISPATCH: 'DISPATCH',\n    STOP: 'STOP',\n    ACTION: 'ACTION',\n};\nconst REDUX_DEVTOOLS_EXTENSION = new InjectionToken('@ngrx/store-devtools Redux Devtools Extension');\nclass DevtoolsExtension {\n    constructor(devtoolsExtension, config, dispatcher) {\n        this.config = config;\n        this.dispatcher = dispatcher;\n        this.devtoolsExtension = devtoolsExtension;\n        this.createActionStreams();\n    }\n    notify(action, state) {\n        if (!this.devtoolsExtension) {\n            return;\n        }\n        // Check to see if the action requires a full update of the liftedState.\n        // If it is a simple action generated by the user's app and the recording\n        // is not locked/paused, only send the action and the current state (fast).\n        //\n        // A full liftedState update (slow: serializes the entire liftedState) is\n        // only required when:\n        //   a) redux-devtools-extension fires the @@Init action (ignored by\n        //      @ngrx/store-devtools)\n        //   b) an action is generated by an @ngrx module (e.g. @ngrx/effects/init\n        //      or @ngrx/store/update-reducers)\n        //   c) the state has been recomputed due to time-traveling\n        //   d) any action that is not a PerformAction to err on the side of\n        //      caution.\n        if (action.type === PERFORM_ACTION) {\n            if (state.isLocked || state.isPaused) {\n                return;\n            }\n            const currentState = unliftState(state);\n            if (shouldFilterActions(this.config) &&\n                isActionFiltered(currentState, action, this.config.predicate, this.config.actionsSafelist, this.config.actionsBlocklist)) {\n                return;\n            }\n            const sanitizedState = this.config.stateSanitizer\n                ? sanitizeState(this.config.stateSanitizer, currentState, state.currentStateIndex)\n                : currentState;\n            const sanitizedAction = this.config.actionSanitizer\n                ? sanitizeAction(this.config.actionSanitizer, action, state.nextActionId)\n                : action;\n            this.sendToReduxDevtools(() => this.extensionConnection.send(sanitizedAction, sanitizedState));\n        }\n        else {\n            // Requires full state update\n            const sanitizedLiftedState = {\n                ...state,\n                stagedActionIds: state.stagedActionIds,\n                actionsById: this.config.actionSanitizer\n                    ? sanitizeActions(this.config.actionSanitizer, state.actionsById)\n                    : state.actionsById,\n                computedStates: this.config.stateSanitizer\n                    ? sanitizeStates(this.config.stateSanitizer, state.computedStates)\n                    : state.computedStates,\n            };\n            this.sendToReduxDevtools(() => this.devtoolsExtension.send(null, sanitizedLiftedState, this.getExtensionConfig(this.config)));\n        }\n    }\n    createChangesObservable() {\n        if (!this.devtoolsExtension) {\n            return EMPTY;\n        }\n        return new Observable((subscriber) => {\n            const connection = this.devtoolsExtension.connect(this.getExtensionConfig(this.config));\n            this.extensionConnection = connection;\n            connection.init();\n            connection.subscribe((change) => subscriber.next(change));\n            return connection.unsubscribe;\n        });\n    }\n    createActionStreams() {\n        // Listens to all changes\n        const changes$ = this.createChangesObservable().pipe(share());\n        // Listen for the start action\n        const start$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.START));\n        // Listen for the stop action\n        const stop$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.STOP));\n        // Listen for lifted actions\n        const liftedActions$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.DISPATCH), map((change) => this.unwrapAction(change.payload)), concatMap((action) => {\n            if (action.type === IMPORT_STATE) {\n                // State imports may happen in two situations:\n                // 1. Explicitly by user\n                // 2. User activated the \"persist state accross reloads\" option\n                //    and now the state is imported during reload.\n                // Because of option 2, we need to give possible\n                // lazy loaded reducers time to instantiate.\n                // As soon as there is no UPDATE action within 1 second,\n                // it is assumed that all reducers are loaded.\n                return this.dispatcher.pipe(filter((action) => action.type === UPDATE), timeout(1000), debounceTime(1000), map(() => action), catchError(() => of(action)), take(1));\n            }\n            else {\n                return of(action);\n            }\n        }));\n        // Listen for unlifted actions\n        const actions$ = changes$.pipe(filter((change) => change.type === ExtensionActionTypes.ACTION), map((change) => this.unwrapAction(change.payload)));\n        const actionsUntilStop$ = actions$.pipe(takeUntil(stop$));\n        const liftedUntilStop$ = liftedActions$.pipe(takeUntil(stop$));\n        this.start$ = start$.pipe(takeUntil(stop$));\n        // Only take the action sources between the start/stop events\n        this.actions$ = this.start$.pipe(switchMap(() => actionsUntilStop$));\n        this.liftedActions$ = this.start$.pipe(switchMap(() => liftedUntilStop$));\n    }\n    unwrapAction(action) {\n        return typeof action === 'string' ? eval(`(${action})`) : action;\n    }\n    getExtensionConfig(config) {\n        const extensionOptions = {\n            name: config.name,\n            features: config.features,\n            serialize: config.serialize,\n            autoPause: config.autoPause ?? false,\n            trace: config.trace ?? false,\n            traceLimit: config.traceLimit ?? 75,\n            // The action/state sanitizers are not added to the config\n            // because sanitation is done in this class already.\n            // It is done before sending it to the devtools extension for consistency:\n            // - If we call extensionConnection.send(...),\n            //   the extension would call the sanitizers.\n            // - If we call devtoolsExtension.send(...) (aka full state update),\n            //   the extension would NOT call the sanitizers, so we have to do it ourselves.\n        };\n        if (config.maxAge !== false /* support === 0 */) {\n            extensionOptions.maxAge = config.maxAge;\n        }\n        return extensionOptions;\n    }\n    sendToReduxDevtools(send) {\n        try {\n            send();\n        }\n        catch (err) {\n            console.warn('@ngrx/store-devtools: something went wrong inside the redux devtools', err);\n        }\n    }\n}\n/** @nocollapse */ DevtoolsExtension.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: DevtoolsExtension, deps: [{ token: REDUX_DEVTOOLS_EXTENSION }, { token: STORE_DEVTOOLS_CONFIG }, { token: DevtoolsDispatcher }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ DevtoolsExtension.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: DevtoolsExtension });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: DevtoolsExtension, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [REDUX_DEVTOOLS_EXTENSION]\n                }] }, { type: StoreDevtoolsConfig, decorators: [{\n                    type: Inject,\n                    args: [STORE_DEVTOOLS_CONFIG]\n                }] }, { type: DevtoolsDispatcher }]; } });\n\nconst INIT_ACTION = { type: INIT };\nconst RECOMPUTE = '@ngrx/store-devtools/recompute';\nconst RECOMPUTE_ACTION = { type: RECOMPUTE };\n/**\n * Computes the next entry in the log by applying an action.\n */\nfunction computeNextEntry(reducer, action, state, error, errorHandler) {\n    if (error) {\n        return {\n            state,\n            error: 'Interrupted by an error up the chain',\n        };\n    }\n    let nextState = state;\n    let nextError;\n    try {\n        nextState = reducer(state, action);\n    }\n    catch (err) {\n        nextError = err.toString();\n        errorHandler.handleError(err);\n    }\n    return {\n        state: nextState,\n        error: nextError,\n    };\n}\n/**\n * Runs the reducer on invalidated actions to get a fresh computation log.\n */\nfunction recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused) {\n    // Optimization: exit early and return the same reference\n    // if we know nothing could have changed.\n    if (minInvalidatedStateIndex >= computedStates.length &&\n        computedStates.length === stagedActionIds.length) {\n        return computedStates;\n    }\n    const nextComputedStates = computedStates.slice(0, minInvalidatedStateIndex);\n    // If the recording is paused, recompute all states up until the pause state,\n    // else recompute all states.\n    const lastIncludedActionId = stagedActionIds.length - (isPaused ? 1 : 0);\n    for (let i = minInvalidatedStateIndex; i < lastIncludedActionId; i++) {\n        const actionId = stagedActionIds[i];\n        const action = actionsById[actionId].action;\n        const previousEntry = nextComputedStates[i - 1];\n        const previousState = previousEntry ? previousEntry.state : committedState;\n        const previousError = previousEntry ? previousEntry.error : undefined;\n        const shouldSkip = skippedActionIds.indexOf(actionId) > -1;\n        const entry = shouldSkip\n            ? previousEntry\n            : computeNextEntry(reducer, action, previousState, previousError, errorHandler);\n        nextComputedStates.push(entry);\n    }\n    // If the recording is paused, the last state will not be recomputed,\n    // because it's essentially not part of the state history.\n    if (isPaused) {\n        nextComputedStates.push(computedStates[computedStates.length - 1]);\n    }\n    return nextComputedStates;\n}\nfunction liftInitialState(initialCommittedState, monitorReducer) {\n    return {\n        monitorState: monitorReducer(undefined, {}),\n        nextActionId: 1,\n        actionsById: { 0: liftAction(INIT_ACTION) },\n        stagedActionIds: [0],\n        skippedActionIds: [],\n        committedState: initialCommittedState,\n        currentStateIndex: 0,\n        computedStates: [],\n        isLocked: false,\n        isPaused: false,\n    };\n}\n/**\n * Creates a history state reducer from an app's reducer.\n */\nfunction liftReducerWith(initialCommittedState, initialLiftedState, errorHandler, monitorReducer, options = {}) {\n    /**\n     * Manages how the history actions modify the history state.\n     */\n    return (reducer) => (liftedState, liftedAction) => {\n        let { monitorState, actionsById, nextActionId, stagedActionIds, skippedActionIds, committedState, currentStateIndex, computedStates, isLocked, isPaused, } = liftedState || initialLiftedState;\n        if (!liftedState) {\n            // Prevent mutating initialLiftedState\n            actionsById = Object.create(actionsById);\n        }\n        function commitExcessActions(n) {\n            // Auto-commits n-number of excess actions.\n            let excess = n;\n            let idsToDelete = stagedActionIds.slice(1, excess + 1);\n            for (let i = 0; i < idsToDelete.length; i++) {\n                if (computedStates[i + 1].error) {\n                    // Stop if error is found. Commit actions up to error.\n                    excess = i;\n                    idsToDelete = stagedActionIds.slice(1, excess + 1);\n                    break;\n                }\n                else {\n                    delete actionsById[idsToDelete[i]];\n                }\n            }\n            skippedActionIds = skippedActionIds.filter((id) => idsToDelete.indexOf(id) === -1);\n            stagedActionIds = [0, ...stagedActionIds.slice(excess + 1)];\n            committedState = computedStates[excess].state;\n            computedStates = computedStates.slice(excess);\n            currentStateIndex =\n                currentStateIndex > excess ? currentStateIndex - excess : 0;\n        }\n        function commitChanges() {\n            // Consider the last committed state the new starting point.\n            // Squash any staged actions into a single committed state.\n            actionsById = { 0: liftAction(INIT_ACTION) };\n            nextActionId = 1;\n            stagedActionIds = [0];\n            skippedActionIds = [];\n            committedState = computedStates[currentStateIndex].state;\n            currentStateIndex = 0;\n            computedStates = [];\n        }\n        // By default, aggressively recompute every state whatever happens.\n        // This has O(n) performance, so we'll override this to a sensible\n        // value whenever we feel like we don't have to recompute the states.\n        let minInvalidatedStateIndex = 0;\n        switch (liftedAction.type) {\n            case LOCK_CHANGES: {\n                isLocked = liftedAction.status;\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case PAUSE_RECORDING: {\n                isPaused = liftedAction.status;\n                if (isPaused) {\n                    // Add a pause action to signal the devtools-user the recording is paused.\n                    // The corresponding state will be overwritten on each update to always contain\n                    // the latest state (see Actions.PERFORM_ACTION).\n                    stagedActionIds = [...stagedActionIds, nextActionId];\n                    actionsById[nextActionId] = new PerformAction({\n                        type: '@ngrx/devtools/pause',\n                    }, +Date.now());\n                    nextActionId++;\n                    minInvalidatedStateIndex = stagedActionIds.length - 1;\n                    computedStates = computedStates.concat(computedStates[computedStates.length - 1]);\n                    if (currentStateIndex === stagedActionIds.length - 2) {\n                        currentStateIndex++;\n                    }\n                    minInvalidatedStateIndex = Infinity;\n                }\n                else {\n                    commitChanges();\n                }\n                break;\n            }\n            case RESET: {\n                // Get back to the state the store was created with.\n                actionsById = { 0: liftAction(INIT_ACTION) };\n                nextActionId = 1;\n                stagedActionIds = [0];\n                skippedActionIds = [];\n                committedState = initialCommittedState;\n                currentStateIndex = 0;\n                computedStates = [];\n                break;\n            }\n            case COMMIT: {\n                commitChanges();\n                break;\n            }\n            case ROLLBACK: {\n                // Forget about any staged actions.\n                // Start again from the last committed state.\n                actionsById = { 0: liftAction(INIT_ACTION) };\n                nextActionId = 1;\n                stagedActionIds = [0];\n                skippedActionIds = [];\n                currentStateIndex = 0;\n                computedStates = [];\n                break;\n            }\n            case TOGGLE_ACTION: {\n                // Toggle whether an action with given ID is skipped.\n                // Being skipped means it is a no-op during the computation.\n                const { id: actionId } = liftedAction;\n                const index = skippedActionIds.indexOf(actionId);\n                if (index === -1) {\n                    skippedActionIds = [actionId, ...skippedActionIds];\n                }\n                else {\n                    skippedActionIds = skippedActionIds.filter((id) => id !== actionId);\n                }\n                // Optimization: we know history before this action hasn't changed\n                minInvalidatedStateIndex = stagedActionIds.indexOf(actionId);\n                break;\n            }\n            case SET_ACTIONS_ACTIVE: {\n                // Toggle whether an action with given ID is skipped.\n                // Being skipped means it is a no-op during the computation.\n                const { start, end, active } = liftedAction;\n                const actionIds = [];\n                for (let i = start; i < end; i++)\n                    actionIds.push(i);\n                if (active) {\n                    skippedActionIds = difference(skippedActionIds, actionIds);\n                }\n                else {\n                    skippedActionIds = [...skippedActionIds, ...actionIds];\n                }\n                // Optimization: we know history before this action hasn't changed\n                minInvalidatedStateIndex = stagedActionIds.indexOf(start);\n                break;\n            }\n            case JUMP_TO_STATE: {\n                // Without recomputing anything, move the pointer that tell us\n                // which state is considered the current one. Useful for sliders.\n                currentStateIndex = liftedAction.index;\n                // Optimization: we know the history has not changed.\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case JUMP_TO_ACTION: {\n                // Jumps to a corresponding state to a specific action.\n                // Useful when filtering actions.\n                const index = stagedActionIds.indexOf(liftedAction.actionId);\n                if (index !== -1)\n                    currentStateIndex = index;\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n            case SWEEP: {\n                // Forget any actions that are currently being skipped.\n                stagedActionIds = difference(stagedActionIds, skippedActionIds);\n                skippedActionIds = [];\n                currentStateIndex = Math.min(currentStateIndex, stagedActionIds.length - 1);\n                break;\n            }\n            case PERFORM_ACTION: {\n                // Ignore action and return state as is if recording is locked\n                if (isLocked) {\n                    return liftedState || initialLiftedState;\n                }\n                if (isPaused ||\n                    (liftedState &&\n                        isActionFiltered(liftedState.computedStates[currentStateIndex], liftedAction, options.predicate, options.actionsSafelist, options.actionsBlocklist))) {\n                    // If recording is paused or if the action should be ignored, overwrite the last state\n                    // (corresponds to the pause action) and keep everything else as is.\n                    // This way, the app gets the new current state while the devtools\n                    // do not record another action.\n                    const lastState = computedStates[computedStates.length - 1];\n                    computedStates = [\n                        ...computedStates.slice(0, -1),\n                        computeNextEntry(reducer, liftedAction.action, lastState.state, lastState.error, errorHandler),\n                    ];\n                    minInvalidatedStateIndex = Infinity;\n                    break;\n                }\n                // Auto-commit as new actions come in.\n                if (options.maxAge && stagedActionIds.length === options.maxAge) {\n                    commitExcessActions(1);\n                }\n                if (currentStateIndex === stagedActionIds.length - 1) {\n                    currentStateIndex++;\n                }\n                const actionId = nextActionId++;\n                // Mutation! This is the hottest path, and we optimize on purpose.\n                // It is safe because we set a new key in a cache dictionary.\n                actionsById[actionId] = liftedAction;\n                stagedActionIds = [...stagedActionIds, actionId];\n                // Optimization: we know that only the new action needs computing.\n                minInvalidatedStateIndex = stagedActionIds.length - 1;\n                break;\n            }\n            case IMPORT_STATE: {\n                // Completely replace everything.\n                ({\n                    monitorState,\n                    actionsById,\n                    nextActionId,\n                    stagedActionIds,\n                    skippedActionIds,\n                    committedState,\n                    currentStateIndex,\n                    computedStates,\n                    isLocked,\n                    isPaused,\n                } = liftedAction.nextLiftedState);\n                break;\n            }\n            case INIT: {\n                // Always recompute states on hot reload and init.\n                minInvalidatedStateIndex = 0;\n                if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                    // States must be recomputed before committing excess.\n                    computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                    commitExcessActions(stagedActionIds.length - options.maxAge);\n                    // Avoid double computation.\n                    minInvalidatedStateIndex = Infinity;\n                }\n                break;\n            }\n            case UPDATE: {\n                const stateHasErrors = computedStates.filter((state) => state.error).length > 0;\n                if (stateHasErrors) {\n                    // Recompute all states\n                    minInvalidatedStateIndex = 0;\n                    if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                        // States must be recomputed before committing excess.\n                        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                        commitExcessActions(stagedActionIds.length - options.maxAge);\n                        // Avoid double computation.\n                        minInvalidatedStateIndex = Infinity;\n                    }\n                }\n                else {\n                    // If not paused/locked, add a new action to signal devtools-user\n                    // that there was a reducer update.\n                    if (!isPaused && !isLocked) {\n                        if (currentStateIndex === stagedActionIds.length - 1) {\n                            currentStateIndex++;\n                        }\n                        // Add a new action to only recompute state\n                        const actionId = nextActionId++;\n                        actionsById[actionId] = new PerformAction(liftedAction, +Date.now());\n                        stagedActionIds = [...stagedActionIds, actionId];\n                        minInvalidatedStateIndex = stagedActionIds.length - 1;\n                        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n                    }\n                    // Recompute state history with latest reducer and update action\n                    computedStates = computedStates.map((cmp) => ({\n                        ...cmp,\n                        state: reducer(cmp.state, RECOMPUTE_ACTION),\n                    }));\n                    currentStateIndex = stagedActionIds.length - 1;\n                    if (options.maxAge && stagedActionIds.length > options.maxAge) {\n                        commitExcessActions(stagedActionIds.length - options.maxAge);\n                    }\n                    // Avoid double computation.\n                    minInvalidatedStateIndex = Infinity;\n                }\n                break;\n            }\n            default: {\n                // If the action is not recognized, it's a monitor action.\n                // Optimization: a monitor action can't change history.\n                minInvalidatedStateIndex = Infinity;\n                break;\n            }\n        }\n        computedStates = recomputeStates(computedStates, minInvalidatedStateIndex, reducer, committedState, actionsById, stagedActionIds, skippedActionIds, errorHandler, isPaused);\n        monitorState = monitorReducer(monitorState, liftedAction);\n        return {\n            monitorState,\n            actionsById,\n            nextActionId,\n            stagedActionIds,\n            skippedActionIds,\n            committedState,\n            currentStateIndex,\n            computedStates,\n            isLocked,\n            isPaused,\n        };\n    };\n}\n\nclass StoreDevtools {\n    constructor(dispatcher, actions$, reducers$, extension, scannedActions, errorHandler, initialState, config) {\n        const liftedInitialState = liftInitialState(initialState, config.monitor);\n        const liftReducer = liftReducerWith(initialState, liftedInitialState, errorHandler, config.monitor, config);\n        const liftedAction$ = merge(merge(actions$.asObservable().pipe(skip(1)), extension.actions$).pipe(map(liftAction)), dispatcher, extension.liftedActions$).pipe(observeOn(queueScheduler));\n        const liftedReducer$ = reducers$.pipe(map(liftReducer));\n        const liftedStateSubject = new ReplaySubject(1);\n        const liftedStateSubscription = liftedAction$\n            .pipe(withLatestFrom(liftedReducer$), scan(({ state: liftedState }, [action, reducer]) => {\n            let reducedLiftedState = reducer(liftedState, action);\n            // On full state update\n            // If we have actions filters, we must filter completely our lifted state to be sync with the extension\n            if (action.type !== PERFORM_ACTION && shouldFilterActions(config)) {\n                reducedLiftedState = filterLiftedState(reducedLiftedState, config.predicate, config.actionsSafelist, config.actionsBlocklist);\n            }\n            // Extension should be sent the sanitized lifted state\n            extension.notify(action, reducedLiftedState);\n            return { state: reducedLiftedState, action };\n        }, { state: liftedInitialState, action: null }))\n            .subscribe(({ state, action }) => {\n            liftedStateSubject.next(state);\n            if (action.type === PERFORM_ACTION) {\n                const unliftedAction = action.action;\n                scannedActions.next(unliftedAction);\n            }\n        });\n        const extensionStartSubscription = extension.start$.subscribe(() => {\n            this.refresh();\n        });\n        const liftedState$ = liftedStateSubject.asObservable();\n        const state$ = liftedState$.pipe(map(unliftState));\n        this.extensionStartSubscription = extensionStartSubscription;\n        this.stateSubscription = liftedStateSubscription;\n        this.dispatcher = dispatcher;\n        this.liftedState = liftedState$;\n        this.state = state$;\n    }\n    dispatch(action) {\n        this.dispatcher.next(action);\n    }\n    next(action) {\n        this.dispatcher.next(action);\n    }\n    error(error) { }\n    complete() { }\n    performAction(action) {\n        this.dispatch(new PerformAction(action, +Date.now()));\n    }\n    refresh() {\n        this.dispatch(new Refresh());\n    }\n    reset() {\n        this.dispatch(new Reset(+Date.now()));\n    }\n    rollback() {\n        this.dispatch(new Rollback(+Date.now()));\n    }\n    commit() {\n        this.dispatch(new Commit(+Date.now()));\n    }\n    sweep() {\n        this.dispatch(new Sweep());\n    }\n    toggleAction(id) {\n        this.dispatch(new ToggleAction(id));\n    }\n    jumpToAction(actionId) {\n        this.dispatch(new JumpToAction(actionId));\n    }\n    jumpToState(index) {\n        this.dispatch(new JumpToState(index));\n    }\n    importState(nextLiftedState) {\n        this.dispatch(new ImportState(nextLiftedState));\n    }\n    lockChanges(status) {\n        this.dispatch(new LockChanges(status));\n    }\n    pauseRecording(status) {\n        this.dispatch(new PauseRecording(status));\n    }\n}\n/** @nocollapse */ StoreDevtools.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreDevtools, deps: [{ token: DevtoolsDispatcher }, { token: i2.ActionsSubject }, { token: i2.ReducerObservable }, { token: DevtoolsExtension }, { token: i2.ScannedActionsSubject }, { token: i0.ErrorHandler }, { token: INITIAL_STATE }, { token: STORE_DEVTOOLS_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ StoreDevtools.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreDevtools });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreDevtools, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: DevtoolsDispatcher }, { type: i2.ActionsSubject }, { type: i2.ReducerObservable }, { type: DevtoolsExtension }, { type: i2.ScannedActionsSubject }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [INITIAL_STATE]\n                }] }, { type: StoreDevtoolsConfig, decorators: [{\n                    type: Inject,\n                    args: [STORE_DEVTOOLS_CONFIG]\n                }] }]; } });\n\nconst IS_EXTENSION_OR_MONITOR_PRESENT = new InjectionToken('@ngrx/store-devtools Is Devtools Extension or Monitor Present');\nfunction createIsExtensionOrMonitorPresent(extension, config) {\n    return Boolean(extension) || config.monitor !== noMonitor;\n}\nfunction createReduxDevtoolsExtension() {\n    const extensionKey = '__REDUX_DEVTOOLS_EXTENSION__';\n    if (typeof window === 'object' &&\n        typeof window[extensionKey] !== 'undefined') {\n        return window[extensionKey];\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Provides developer tools and instrumentation for `Store`.\n *\n * @usageNotes\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideStoreDevtools({\n *       maxAge: 25,\n *       logOnly: !isDevMode(),\n *     }),\n *   ],\n * });\n * ```\n */\nfunction provideStoreDevtools(options = {}) {\n    return makeEnvironmentProviders([\n        DevtoolsExtension,\n        DevtoolsDispatcher,\n        StoreDevtools,\n        {\n            provide: INITIAL_OPTIONS,\n            useValue: options,\n        },\n        {\n            provide: IS_EXTENSION_OR_MONITOR_PRESENT,\n            deps: [REDUX_DEVTOOLS_EXTENSION, STORE_DEVTOOLS_CONFIG],\n            useFactory: createIsExtensionOrMonitorPresent,\n        },\n        {\n            provide: REDUX_DEVTOOLS_EXTENSION,\n            useFactory: createReduxDevtoolsExtension,\n        },\n        {\n            provide: STORE_DEVTOOLS_CONFIG,\n            deps: [INITIAL_OPTIONS],\n            useFactory: createConfig,\n        },\n        {\n            provide: StateObservable,\n            deps: [StoreDevtools],\n            useFactory: createStateObservable,\n        },\n        {\n            provide: ReducerManagerDispatcher,\n            useExisting: DevtoolsDispatcher,\n        },\n    ]);\n}\n\nfunction createStateObservable(devtools) {\n    return devtools.state;\n}\nclass StoreDevtoolsModule {\n    static instrument(options = {}) {\n        return {\n            ngModule: StoreDevtoolsModule,\n            providers: [provideStoreDevtools(options)],\n        };\n    }\n}\n/** @nocollapse */ StoreDevtoolsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreDevtoolsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ StoreDevtoolsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreDevtoolsModule });\n/** @nocollapse */ StoreDevtoolsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreDevtoolsModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreDevtoolsModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INITIAL_OPTIONS, RECOMPUTE, REDUX_DEVTOOLS_EXTENSION, StoreDevtools, StoreDevtoolsConfig, StoreDevtoolsModule, provideStoreDevtools };\n//# sourceMappingURL=ngrx-store-devtools.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}