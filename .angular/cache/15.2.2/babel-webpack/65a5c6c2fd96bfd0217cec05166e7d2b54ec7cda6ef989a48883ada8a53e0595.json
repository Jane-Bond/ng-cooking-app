{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { FormArray, FormControl, FormGroup, Validators } from \"@angular/forms\";\nlet RecipeEditComponent = class RecipeEditComponent {\n  constructor(route, recipeService, router, priva) {\n    this.route = route;\n    this.recipeService = recipeService;\n    this.router = router;\n    this.editMode = false;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.id = +params[\"id\"];\n      this.editMode = params[\"id\"] != null;\n      this.initForm();\n    });\n  }\n  onSubmit() {\n    // const newRecipe = new Recipe(\n    //   this.recipeForm.value[\"name\"],\n    //   this.recipeForm.value[\"description\"],\n    //   this.recipeForm.value[\"imagePath\"],\n    //   this.recipeForm.value[\"ingredients\"]\n    // );\n    if (this.editMode) {\n      this.recipeService.updateRecipe(this.id, this.recipeForm.value);\n    } else {\n      this.recipeService.addRecipe(this.recipeForm.value);\n    }\n    this.onCancel();\n  }\n  onAddIngredient() {\n    this.recipeForm.get(\"ingredients\").push(new FormGroup({\n      name: new FormControl(null, Validators.required),\n      amount: new FormControl(null, [Validators.required, Validators.pattern(/^[1-9]+[0-9]*$/)])\n    }));\n  }\n  onDeleteIngredient(index) {\n    this.recipeForm.get(\"ingredients\").removeAt(index);\n  }\n  get controls() {\n    return this.recipeForm.get(\"ingredients\").controls;\n  }\n  onCancel() {\n    this.router.navigate([\"../\"], {\n      relativeTo: this.route\n    });\n  }\n  initForm() {\n    let recipeName = \"\";\n    let recipeImagePath = \"\";\n    let recipeDescription = \"\";\n    let recipeIngredients = new FormArray([]);\n    if (this.editMode) {\n      const recipe = this.recipeService.getRecipe(this.id);\n      recipeName = recipe.name;\n      recipeImagePath = recipe.imagePath;\n      recipeDescription = recipe.description;\n      if (recipe[\"ingredients\"]) {\n        for (let ingredient of recipe.ingredients) {\n          // bug fixed, explicitly added type of <FormArray> ad VS Code suggested to add <unknown>\n          recipeIngredients.push(new FormGroup({\n            name: new FormControl(ingredient.name, Validators.required),\n            amount: new FormControl(ingredient.amount, [Validators.required, Validators.pattern(/^[1-9]+[0-9]*$/)])\n          }));\n        }\n      }\n    }\n    this.recipeForm = new FormGroup({\n      name: new FormControl(recipeName, Validators.required),\n      imagePath: new FormControl(recipeImagePath, Validators.required),\n      description: new FormControl(recipeDescription, Validators.required),\n      ingredients: recipeIngredients\n    });\n  }\n};\nRecipeEditComponent = __decorate([Component({\n  selector: \"app-recipe-edit\",\n  templateUrl: \"./recipe-edit.component.html\",\n  styleUrls: [\"./recipe-edit.component.css\"]\n})], RecipeEditComponent);\nexport { RecipeEditComponent };","map":{"version":3,"mappings":"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","names":["Component","FormArray","FormControl","FormGroup","Validators","RecipeEditComponent","constructor","route","recipeService","router","priva","ngOnInit","params","subscribe","id","editMode","initForm","onSubmit","updateRecipe","recipeForm","value","addRecipe","onCancel","onAddIngredient","get","push","name","required","amount","pattern","onDeleteIngredient","index","removeAt","controls","navigate","relativeTo","recipeName","recipeImagePath","recipeDescription","recipeIngredients","recipe","getRecipe","imagePath","description","ingredient","ingredients","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/recipes/recipe-edit/recipe-edit.component.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormArray, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\nimport { RecipeService } from \"../recipe.service\";\n\n@Component({\n  selector: \"app-recipe-edit\",\n  templateUrl: \"./recipe-edit.component.html\",\n  styleUrls: [\"./recipe-edit.component.css\"],\n})\nexport class RecipeEditComponent implements OnInit {\n  id: number;\n  editMode = false;\n  recipeForm: FormGroup;\n\n  constructor(\n    private route: ActivatedRoute,\n    private recipeService: RecipeService,\n    private router: Router,\n    priva\n  ) {}\n\n  ngOnInit() {\n    this.route.params.subscribe((params: Params) => {\n      this.id = +params[\"id\"];\n      this.editMode = params[\"id\"] != null;\n      this.initForm();\n    });\n  }\n\n  onSubmit() {\n    // const newRecipe = new Recipe(\n    //   this.recipeForm.value[\"name\"],\n    //   this.recipeForm.value[\"description\"],\n    //   this.recipeForm.value[\"imagePath\"],\n    //   this.recipeForm.value[\"ingredients\"]\n    // );\n    if (this.editMode) {\n      this.recipeService.updateRecipe(this.id, this.recipeForm.value);\n    } else {\n      this.recipeService.addRecipe(this.recipeForm.value);\n    }\n    this.onCancel();\n  }\n\n  onAddIngredient() {\n    (<FormArray>this.recipeForm.get(\"ingredients\")).push(\n      new FormGroup({\n        name: new FormControl(null, Validators.required),\n        amount: new FormControl(null, [\n          Validators.required,\n          Validators.pattern(/^[1-9]+[0-9]*$/),\n        ]),\n      })\n    );\n  }\n\n  onDeleteIngredient(index: number) {\n    (<FormArray>this.recipeForm.get(\"ingredients\")).removeAt(index);\n  }\n\n  get controls() {\n    return (<FormArray>this.recipeForm.get(\"ingredients\")).controls;\n  }\n\n  onCancel() {\n    this.router.navigate([\"../\"], { relativeTo: this.route });\n  }\n\n  private initForm() {\n    let recipeName = \"\";\n    let recipeImagePath = \"\";\n    let recipeDescription = \"\";\n    let recipeIngredients = new FormArray([]);\n\n    if (this.editMode) {\n      const recipe = this.recipeService.getRecipe(this.id);\n      recipeName = recipe.name;\n      recipeImagePath = recipe.imagePath;\n      recipeDescription = recipe.description;\n      if (recipe[\"ingredients\"]) {\n        for (let ingredient of recipe.ingredients) {\n          // bug fixed, explicitly added type of <FormArray> ad VS Code suggested to add <unknown>\n          (<FormArray>(<unknown>recipeIngredients)).push(\n            new FormGroup({\n              name: new FormControl(ingredient.name, Validators.required),\n              amount: new FormControl(ingredient.amount, [\n                Validators.required,\n                Validators.pattern(/^[1-9]+[0-9]*$/),\n              ]),\n            })\n          );\n        }\n      }\n    }\n\n    this.recipeForm = new FormGroup({\n      name: new FormControl(recipeName, Validators.required),\n      imagePath: new FormControl(recipeImagePath, Validators.required),\n      description: new FormControl(recipeDescription, Validators.required),\n      ingredients: recipeIngredients,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}