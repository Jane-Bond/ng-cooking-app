{"ast":null,"code":"import { ofType } from \"@ngrx/effects\";\nimport { catchError, switchMap, map } from \"rxjs/operators\";\nimport * as AuthActions from \"./auth.actions\";\nimport { environment } from \"src/environments/environment\";\nimport { createEffect } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nexport class AuthEffects {\n  // authSuccess = createEffect(\n  //   () =>\n  //     this.actions$.pipe(\n  //       ofType(AuthActions.LOGIN),\n  //       tap(() => {\n  //         this.router.navigate([\"/\"]);\n  //       })\n  //     ),\n  //   { dispatch: false }\n  // );\n  constructor(actions$, http, router) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.router = router;\n    this.authLogin = createEffect(() => this.actions$.pipe(ofType(AuthActions.LOGIN_START), switchMap(authData => {\n      return this.http.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\" + environment.firebaseAPIKey, {\n        email: authData.payload.email,\n        password: authData.payload.password,\n        returnSecureToken: true\n      }).pipe(map(resData => {\n        const expirationDate = new Date(new Date().getTime() + +resData.expiresIn * 1000);\n        return new AuthActions.Login({\n          email: resData.email,\n          userId: resData.localId,\n          token: resData.idToken,\n          expirationDate: expirationDate\n        });\n      }), catchError(error => {\n        //...return non-error Observable so our stream doesn't die\n        return of();\n      }));\n    })), {\n      dispatch: false\n    });\n  }\n}\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router));\n};\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,MAAM,QAAQ,eAAe;AAC/C,SAASC,UAAU,EAAEC,SAAS,EAAEC,GAAG,QAAa,gBAAgB;AAChE,OAAO,KAAKC,WAAW,MAAM,gBAAgB;AAC7C,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,EAAE,QAAQ,MAAM;;;;;AAezB,OAAM,MAAOC,WAAW;EAsCtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEAC,YACUC,QAAiB,EACjBC,IAAgB,EAChBC,MAAc;IAFd,aAAQ,GAARF,QAAQ;IACR,SAAI,GAAJC,IAAI;IACJ,WAAM,GAANC,MAAM;IAnDhB,cAAS,GAAGN,YAAY,CACtB,MACE,IAAI,CAACI,QAAQ,CAACG,IAAI,CAChBb,MAAM,CAACI,WAAW,CAACU,WAAW,CAAC,EAC/BZ,SAAS,CAAEa,QAAgC,IAAI;MAC7C,OAAO,IAAI,CAACJ,IAAI,CACbK,IAAI,CACH,4EAA4E,GAC1EX,WAAW,CAACY,cAAc,EAC5B;QACEC,KAAK,EAAEH,QAAQ,CAACI,OAAO,CAACD,KAAK;QAC7BE,QAAQ,EAAEL,QAAQ,CAACI,OAAO,CAACC,QAAQ;QACnCC,iBAAiB,EAAE;OACpB,CACF,CACAR,IAAI,CACHV,GAAG,CAAEmB,OAAO,IAAI;QACd,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAC7B,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,CAACH,OAAO,CAACI,SAAS,GAAG,IAAI,CACjD;QACD,OAAO,IAAItB,WAAW,CAACuB,KAAK,CAAC;UAC3BT,KAAK,EAAEI,OAAO,CAACJ,KAAK;UACpBU,MAAM,EAAEN,OAAO,CAACO,OAAO;UACvBC,KAAK,EAAER,OAAO,CAACS,OAAO;UACtBR,cAAc,EAAEA;SACjB,CAAC;MACJ,CAAC,CAAC,EACFtB,UAAU,CAAE+B,KAAK,IAAI;QACnB;QACA,OAAOzB,EAAE,EAAE;MACb,CAAC,CAAC,CACH;IACL,CAAC,CAAC,CACH,EACH;MAAE0B,QAAQ,EAAE;IAAK,CAAE,CACpB;EAiBE;;AArDQzB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;AAAA","names":["ofType","catchError","switchMap","map","AuthActions","environment","createEffect","of","AuthEffects","constructor","actions$","http","router","pipe","LOGIN_START","authData","post","firebaseAPIKey","email","payload","password","returnSecureToken","resData","expirationDate","Date","getTime","expiresIn","Login","userId","localId","token","idToken","error","dispatch","factory"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/auth/store/auth.effects.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Actions, ofType } from \"@ngrx/effects\";\nimport { catchError, switchMap, map, tap } from \"rxjs/operators\";\nimport * as AuthActions from \"./auth.actions\";\nimport { environment } from \"src/environments/environment\";\nimport { createEffect } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\n@Injectable()\nexport class AuthEffects {\n  authLogin = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.LOGIN_START),\n        switchMap((authData: AuthActions.LoginStart) => {\n          return this.http\n            .post<AuthResponseData>(\n              \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\" +\n                environment.firebaseAPIKey,\n              {\n                email: authData.payload.email,\n                password: authData.payload.password,\n                returnSecureToken: true,\n              }\n            )\n            .pipe(\n              map((resData) => {\n                const expirationDate = new Date(\n                  new Date().getTime() + +resData.expiresIn * 1000\n                );\n                return new AuthActions.Login({\n                  email: resData.email,\n                  userId: resData.localId,\n                  token: resData.idToken,\n                  expirationDate: expirationDate,\n                });\n              }),\n              catchError((error) => {\n                //...return non-error Observable so our stream doesn't die\n                return of();\n              })\n            );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  // authSuccess = createEffect(\n  //   () =>\n  //     this.actions$.pipe(\n  //       ofType(AuthActions.LOGIN),\n  //       tap(() => {\n  //         this.router.navigate([\"/\"]);\n  //       })\n  //     ),\n  //   { dispatch: false }\n  // );\n\n  constructor(\n    private actions$: Actions,\n    private http: HttpClient,\n    private router: Router\n  ) {}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}