{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport * as AuthActions from \"./store/auth.actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nexport class AuthService {\n  constructor(store) {\n    this.store = store;\n  }\n  autoLogout(expirationDuration) {\n    console.log(expirationDuration);\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    // this.user.next(user);\n    const user = new User(email, userId, token, expirationDate);\n    this.store.dispatch(new AuthActions.AuthenticateSuccess({\n      email: email,\n      userId: userId,\n      token: token,\n      expirationDate: expirationDate\n    }));\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem(\"userData\", JSON.stringify(user));\n  }\n  handleError(errorRes) {\n    let errorMessage = \"An unknown error occured!\";\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case \"EMAIL_EXISTS\":\n        errorMessage = \"This email already exists\";\n        break;\n      case \"EMAIL_NOT_FOUND\":\n        errorMessage = \"This email is not found\";\n        break;\n      case \"INVALID_PASSWORD\":\n        errorMessage = \"Wrong password\";\n    }\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Store));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,QAAQ,MAAM;AACjC,SAASC,IAAI,QAAQ,cAAc;AAInC,OAAO,KAAKC,WAAW,MAAM,sBAAsB;;;AAanD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,KAA8B;IAA9B,UAAK,GAALA,KAAK;EAA4B;EAErDC,UAAU,CAACC,kBAA0B;IACnCC,OAAO,CAACC,GAAG,CAACF,kBAAkB,CAAC;IAC/B,IAAI,CAACG,oBAAoB,GAAGC,UAAU,CAAC,MAAK;MAC1C,IAAI,CAACC,MAAM,EAAE;IACf,CAAC,EAAEL,kBAAkB,CAAC;EACxB;EAEQM,oBAAoB,CAC1BC,KAAa,EACbC,MAAc,EACdC,KAAa,EACbC,SAAiB;IAEjB,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGH,SAAS,GAAG,IAAI,CAAC;IACxE;IACA,MAAMI,IAAI,GAAG,IAAIpB,IAAI,CAACa,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEE,cAAc,CAAC;IAC3D,IAAI,CAACb,KAAK,CAACiB,QAAQ,CACjB,IAAIpB,WAAW,CAACqB,mBAAmB,CAAC;MAClCT,KAAK,EAAEA,KAAK;MACZC,MAAM,EAAEA,MAAM;MACdC,KAAK,EAAEA,KAAK;MACZE,cAAc,EAAEA;KACjB,CAAC,CACH;IACD,IAAI,CAACZ,UAAU,CAACW,SAAS,GAAG,IAAI,CAAC;IACjCO,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC;EACxD;EAEQO,WAAW,CAACC,QAA2B;IAC7C,IAAIC,YAAY,GAAG,2BAA2B;IAC9C,IAAI,CAACD,QAAQ,CAACE,KAAK,IAAI,CAACF,QAAQ,CAACE,KAAK,CAACA,KAAK,EAAE;MAC5C,OAAO/B,UAAU,CAAC8B,YAAY,CAAC;;IAEjC,QAAQD,QAAQ,CAACE,KAAK,CAACA,KAAK,CAACC,OAAO;MAClC,KAAK,cAAc;QACjBF,YAAY,GAAG,2BAA2B;QAC1C;MACF,KAAK,iBAAiB;QACpBA,YAAY,GAAG,yBAAyB;QACxC;MACF,KAAK,kBAAkB;QACrBA,YAAY,GAAG,gBAAgB;IAAC;IAEpC,OAAO9B,UAAU,CAAC8B,YAAY,CAAC;EACjC;;AAjDW3B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA8B,SAAX9B,WAAW;EAAA+B,YADE;AAAM","names":["throwError","User","AuthActions","AuthService","constructor","store","autoLogout","expirationDuration","console","log","tokenExpirationTimer","setTimeout","logout","handleAuthentication","email","userId","token","expiresIn","expirationDate","Date","getTime","user","dispatch","AuthenticateSuccess","localStorage","setItem","JSON","stringify","handleError","errorRes","errorMessage","error","message","factory","providedIn"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport { Router } from \"@angular/router\";\nimport { Store } from \"@ngrx/store\";\nimport * as fromApp from \"../store/app.reducer\";\nimport * as AuthActions from \"./store/auth.actions\";\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  private tokenExpirationTimer: any;\n\n  constructor(private store: Store<fromApp.AppState>) {}\n\n  autoLogout(expirationDuration: number) {\n    console.log(expirationDuration);\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n\n  private handleAuthentication(\n    email: string,\n    userId: string,\n    token: string,\n    expiresIn: number\n  ) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    // this.user.next(user);\n    const user = new User(email, userId, token, expirationDate);\n    this.store.dispatch(\n      new AuthActions.AuthenticateSuccess({\n        email: email,\n        userId: userId,\n        token: token,\n        expirationDate: expirationDate,\n      })\n    );\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem(\"userData\", JSON.stringify(user));\n  }\n\n  private handleError(errorRes: HttpErrorResponse) {\n    let errorMessage = \"An unknown error occured!\";\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case \"EMAIL_EXISTS\":\n        errorMessage = \"This email already exists\";\n        break;\n      case \"EMAIL_NOT_FOUND\":\n        errorMessage = \"This email is not found\";\n        break;\n      case \"INVALID_PASSWORD\":\n        errorMessage = \"Wrong password\";\n    }\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}