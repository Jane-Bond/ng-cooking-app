{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { exhaustMap, take } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@ngrx/store\";\nexport class AuthInterceptorService {\n  constructor(authService, store) {\n    this.authService = authService;\n    this.store = store;\n  }\n  intercept(req, next) {\n    return this.store.select(\"auth\").pipe(take(1), map(), exhaustMap(user => {\n      if (!user) {\n        return next.handle(req);\n      }\n      const modifiedReq = req.clone({\n        params: new HttpParams().set(\"auth\", user.token)\n      });\n      return next.handle(modifiedReq);\n    }));\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Store));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAGEA,UAAU,QAEL,sBAAsB;AAE7B,SAASC,UAAU,EAAEC,IAAI,QAAQ,gBAAgB;;;;AAKjD,OAAM,MAAOC,sBAAsB;EACjCC,YACUC,WAAwB,EACxBC,KAA8B;IAD9B,gBAAW,GAAXD,WAAW;IACX,UAAK,GAALC,KAAK;EACZ;EAEHC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAChD,OAAO,IAAI,CAACH,KAAK,CAACI,MAAM,CAAC,MAAM,CAAC,CAACC,IAAI,CACnCT,IAAI,CAAC,CAAC,CAAC,EACPU,GAAG,EAAE,EACLX,UAAU,CAAEY,IAAI,IAAI;MAClB,IAAI,CAACA,IAAI,EAAE;QACT,OAAOJ,IAAI,CAACK,MAAM,CAACN,GAAG,CAAC;;MAEzB,MAAMO,WAAW,GAAGP,GAAG,CAACQ,KAAK,CAAC;QAC5BC,MAAM,EAAE,IAAIjB,UAAU,EAAE,CAACkB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,KAAK;OAChD,CAAC;MACF,OAAOV,IAAI,CAACK,MAAM,CAACC,WAAW,CAAC;IACjC,CAAC,CAAC,CACH;EACH;;AApBWZ,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAiB,SAAtBjB,sBAAsB;AAAA","names":["HttpParams","exhaustMap","take","AuthInterceptorService","constructor","authService","store","intercept","req","next","select","pipe","map","user","handle","modifiedReq","clone","params","set","token","factory"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/auth/auth-interceptor.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  HttpHandler,\n  HttpInterceptor,\n  HttpParams,\n  HttpRequest,\n} from \"@angular/common/http\";\nimport { AuthService } from \"./auth.service\";\nimport { exhaustMap, take } from \"rxjs/operators\";\nimport { Store } from \"@ngrx/store\";\nimport * as fromApp from \"../store/app.reducer\";\n\n@Injectable()\nexport class AuthInterceptorService implements HttpInterceptor {\n  constructor(\n    private authService: AuthService,\n    private store: Store<fromApp.AppState>\n  ) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    return this.store.select(\"auth\").pipe(\n      take(1),\n      map()\n      exhaustMap((user) => {\n        if (!user) {\n          return next.handle(req);\n        }\n        const modifiedReq = req.clone({\n          params: new HttpParams().set(\"auth\", user.token),\n        });\n        return next.handle(modifiedReq);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}