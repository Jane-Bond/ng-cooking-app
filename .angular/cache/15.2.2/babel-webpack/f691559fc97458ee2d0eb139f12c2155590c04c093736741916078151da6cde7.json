{"ast":null,"code":"import { ofType } from \"@ngrx/effects\";\nimport { catchError, switchMap, map } from \"rxjs/operators\";\nimport * as AuthActions from \"./auth.actions\";\nimport { environment } from \"src/environments/environment\";\nimport { createEffect } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nexport class AuthEffects {\n  constructor(actions$, http) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.authLogin = createEffect(() => this.actions$.pipe(ofType(AuthActions.LOGIN_START), switchMap(authData => {\n      return this.http.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\" + environment.firebaseAPIKey, {\n        email: authData.payload.email,\n        password: authData.payload.password,\n        returnSecureToken: true\n      }).pipe(map(resData => {\n        const expirationDate = new Date(new Date().getTime() + +resData.expiresIn * 1000);\n        return of(new AuthActions.Login({\n          email: resData.email,\n          userId: resData.localId,\n          token: resData.idToken,\n          expirationDate: expirationDate\n        }));\n      }), catchError(error => {\n        //...return non-error Observable so our stream doesn't die\n        return of();\n      }));\n    })), {\n      dispatch: false\n    });\n    this.authSuccess = this.actions$.pipe();\n  }\n}\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient));\n};\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,MAAM,QAAQ,eAAe;AAC/C,SAASC,UAAU,EAAEC,SAAS,EAAEC,GAAG,QAAQ,gBAAgB;AAC3D,OAAO,KAAKC,WAAW,MAAM,gBAAgB;AAC7C,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,EAAE,QAAQ,MAAM;;;;AAczB,OAAM,MAAOC,WAAW;EA0CtBC,YAAoBC,QAAiB,EAAUC,IAAgB;IAA3C,aAAQ,GAARD,QAAQ;IAAmB,SAAI,GAAJC,IAAI;IAzCnD,cAAS,GAAGL,YAAY,CACtB,MACE,IAAI,CAACI,QAAQ,CAACE,IAAI,CAChBZ,MAAM,CAACI,WAAW,CAACS,WAAW,CAAC,EAC/BX,SAAS,CAAEY,QAAgC,IAAI;MAC7C,OAAO,IAAI,CAACH,IAAI,CACbI,IAAI,CACH,4EAA4E,GAC1EV,WAAW,CAACW,cAAc,EAC5B;QACEC,KAAK,EAAEH,QAAQ,CAACI,OAAO,CAACD,KAAK;QAC7BE,QAAQ,EAAEL,QAAQ,CAACI,OAAO,CAACC,QAAQ;QACnCC,iBAAiB,EAAE;OACpB,CACF,CACAR,IAAI,CACHT,GAAG,CAAEkB,OAAO,IAAI;QACd,MAAMC,cAAc,GAAG,IAAIC,IAAI,CAC7B,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAG,CAACH,OAAO,CAACI,SAAS,GAAG,IAAI,CACjD;QACD,OAAOlB,EAAE,CACP,IAAIH,WAAW,CAACsB,KAAK,CAAC;UACpBT,KAAK,EAAEI,OAAO,CAACJ,KAAK;UACpBU,MAAM,EAAEN,OAAO,CAACO,OAAO;UACvBC,KAAK,EAAER,OAAO,CAACS,OAAO;UACtBR,cAAc,EAAEA;SACjB,CAAC,CACH;MACH,CAAC,CAAC,EACFrB,UAAU,CAAE8B,KAAK,IAAI;QACnB;QACA,OAAOxB,EAAE,EAAE;MACb,CAAC,CAAC,CACH;IACL,CAAC,CAAC,CACH,EACH;MAAEyB,QAAQ,EAAE;IAAK,CAAE,CACpB;IAED,gBAAW,GAAG,IAAI,CAACtB,QAAQ,CAACE,IAAI,EAAE;EAEgC;;AA1CvDJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;AAAA","names":["ofType","catchError","switchMap","map","AuthActions","environment","createEffect","of","AuthEffects","constructor","actions$","http","pipe","LOGIN_START","authData","post","firebaseAPIKey","email","payload","password","returnSecureToken","resData","expirationDate","Date","getTime","expiresIn","Login","userId","localId","token","idToken","error","dispatch","factory"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/auth/store/auth.effects.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Actions, ofType } from \"@ngrx/effects\";\nimport { catchError, switchMap, map } from \"rxjs/operators\";\nimport * as AuthActions from \"./auth.actions\";\nimport { environment } from \"src/environments/environment\";\nimport { createEffect } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\n@Injectable()\nexport class AuthEffects {\n  authLogin = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.LOGIN_START),\n        switchMap((authData: AuthActions.LoginStart) => {\n          return this.http\n            .post<AuthResponseData>(\n              \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\" +\n                environment.firebaseAPIKey,\n              {\n                email: authData.payload.email,\n                password: authData.payload.password,\n                returnSecureToken: true,\n              }\n            )\n            .pipe(\n              map((resData) => {\n                const expirationDate = new Date(\n                  new Date().getTime() + +resData.expiresIn * 1000\n                );\n                return of(\n                  new AuthActions.Login({\n                    email: resData.email,\n                    userId: resData.localId,\n                    token: resData.idToken,\n                    expirationDate: expirationDate,\n                  })\n                );\n              }),\n              catchError((error) => {\n                //...return non-error Observable so our stream doesn't die\n                return of();\n              })\n            );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  authSuccess = this.actions$.pipe();\n\n  constructor(private actions$: Actions, private http: HttpClient) {}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}