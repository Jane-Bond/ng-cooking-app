{"ast":null,"code":"import { FormArray, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../recipe.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/common\";\nfunction RecipeEditComponent_div_33_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"div\", 18);\n    i0.ɵɵelement(2, \"input\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 20);\n    i0.ɵɵelement(4, \"input\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 20)(6, \"button\", 4);\n    i0.ɵɵlistener(\"click\", function RecipeEditComponent_div_33_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const i_r3 = restoredCtx.index;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onDeleteIngredient(i_r3));\n    });\n    i0.ɵɵtext(7, \" X \");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const i_r3 = ctx.index;\n    i0.ɵɵproperty(\"formGroupName\", i_r3);\n  }\n}\nexport class RecipeEditComponent {\n  constructor(route, recipeService, router, store) {\n    this.route = route;\n    this.recipeService = recipeService;\n    this.router = router;\n    this.store = store;\n    this.editMode = false;\n  }\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n      this.id = +params[\"id\"];\n      this.editMode = params[\"id\"] != null;\n      this.initForm();\n    });\n  }\n  onSubmit() {\n    // const newRecipe = new Recipe(\n    //   this.recipeForm.value[\"name\"],\n    //   this.recipeForm.value[\"description\"],\n    //   this.recipeForm.value[\"imagePath\"],\n    //   this.recipeForm.value[\"ingredients\"]\n    // );\n    if (this.editMode) {\n      this.recipeService.updateRecipe(this.id, this.recipeForm.value);\n    } else {\n      this.recipeService.addRecipe(this.recipeForm.value);\n    }\n    this.onCancel();\n  }\n  onAddIngredient() {\n    this.recipeForm.get(\"ingredients\").push(new FormGroup({\n      name: new FormControl(null, Validators.required),\n      amount: new FormControl(null, [Validators.required, Validators.pattern(/^[1-9]+[0-9]*$/)])\n    }));\n  }\n  onDeleteIngredient(index) {\n    this.recipeForm.get(\"ingredients\").removeAt(index);\n  }\n  get controls() {\n    return this.recipeForm.get(\"ingredients\").controls;\n  }\n  onCancel() {\n    this.router.navigate([\"../\"], {\n      relativeTo: this.route\n    });\n  }\n  initForm() {\n    let recipeName = \"\";\n    let recipeImagePath = \"\";\n    let recipeDescription = \"\";\n    let recipeIngredients = new FormArray([]);\n    if (this.editMode) {\n      const recipe = this.recipeService.getRecipe(this.id);\n      recipeName = recipe.name;\n      recipeImagePath = recipe.imagePath;\n      recipeDescription = recipe.description;\n      if (recipe[\"ingredients\"]) {\n        for (let ingredient of recipe.ingredients) {\n          // bug fixed, explicitly added type of <FormArray> ad VS Code suggested to add <unknown>\n          recipeIngredients.push(new FormGroup({\n            name: new FormControl(ingredient.name, Validators.required),\n            amount: new FormControl(ingredient.amount, [Validators.required, Validators.pattern(/^[1-9]+[0-9]*$/)])\n          }));\n        }\n      }\n    }\n    this.recipeForm = new FormGroup({\n      name: new FormControl(recipeName, Validators.required),\n      imagePath: new FormControl(recipeImagePath, Validators.required),\n      description: new FormControl(recipeDescription, Validators.required),\n      ingredients: recipeIngredients\n    });\n  }\n}\nRecipeEditComponent.ɵfac = function RecipeEditComponent_Factory(t) {\n  return new (t || RecipeEditComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.RecipeService), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i3.Store));\n};\nRecipeEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RecipeEditComponent,\n  selectors: [[\"app-recipe-edit\"]],\n  decls: 39,\n  vars: 4,\n  consts: [[1, \"row\"], [1, \"col-xs-12\"], [3, \"formGroup\", \"ngSubmit\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"form-group\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", 1, \"form-control\"], [\"for\", \"imagePath\"], [\"type\", \"text\", \"id\", \"imagePath\", \"formControlName\", \"imagePath\", 1, \"form-control\"], [\"imagePath\", \"\"], [1, \"img-responsive\", 3, \"src\"], [\"for\", \"description\"], [\"type\", \"text\", \"id\", \"description\", \"formControlName\", \"description\", \"rows\", \"6\", 1, \"form-control\"], [\"formArrayName\", \"ingredients\", 1, \"col-xs-12\"], [\"class\", \"row\", \"style\", \"margin-top: 10px\", 3, \"formGroupName\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"btn\", \"btn-success\", 3, \"click\"], [1, \"row\", 2, \"margin-top\", \"10px\", 3, \"formGroupName\"], [1, \"col-xs-8\"], [\"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [1, \"col-xs-2\"], [\"type\", \"number\", \"formControlName\", \"amount\", 1, \"form-control\"]],\n  template: function RecipeEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function RecipeEditComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 0)(4, \"div\", 1)(5, \"button\", 3);\n      i0.ɵɵtext(6, \" Save \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function RecipeEditComponent_Template_button_click_7_listener() {\n        return ctx.onCancel();\n      });\n      i0.ɵɵtext(8, \" Cancel \");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"div\", 0)(10, \"div\", 1)(11, \"div\", 5)(12, \"label\", 6);\n      i0.ɵɵtext(13, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(14, \"input\", 7);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(15, \"div\", 0)(16, \"div\", 1)(17, \"div\", 5)(18, \"label\", 8);\n      i0.ɵɵtext(19, \"Image URL\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 9, 10);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(22, \"div\", 0)(23, \"div\", 1);\n      i0.ɵɵelement(24, \"img\", 11);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(25, \"div\", 0)(26, \"div\", 1)(27, \"div\", 5)(28, \"label\", 12);\n      i0.ɵɵtext(29, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(30, \"textarea\", 13);\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(31, \"div\", 0)(32, \"div\", 14);\n      i0.ɵɵtemplate(33, RecipeEditComponent_div_33_Template, 8, 1, \"div\", 15);\n      i0.ɵɵelement(34, \"hr\");\n      i0.ɵɵelementStart(35, \"div\", 0)(36, \"div\", 1)(37, \"button\", 16);\n      i0.ɵɵlistener(\"click\", function RecipeEditComponent_Template_button_click_37_listener() {\n        return ctx.onAddIngredient();\n      });\n      i0.ɵɵtext(38, \" Add Ingredient \");\n      i0.ɵɵelementEnd()()()()()()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(21);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.recipeForm);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"disabled\", !ctx.recipeForm.valid);\n      i0.ɵɵadvance(19);\n      i0.ɵɵproperty(\"src\", _r0.value, i0.ɵɵsanitizeUrl);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngForOf\", ctx.controls);\n    }\n  },\n  dependencies: [i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i4.FormGroupName, i4.FormArrayName, i5.NgForOf],\n  styles: [\"input.ng-invalid.ng-touched[_ngcontent-%COMP%], textarea.ng-invalid.ng-touched[_ngcontent-%COMP%] {\\n  border: 1px solid red;\\n}\\n\\n.btn[_ngcontent-%COMP%]:not(:last-child) {\\n  margin-right: 0.25rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcmVjaXBlcy9yZWNpcGUtZWRpdC9yZWNpcGUtZWRpdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztFQUVFLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHFCQUFxQjtBQUN2QiIsInNvdXJjZXNDb250ZW50IjpbImlucHV0Lm5nLWludmFsaWQubmctdG91Y2hlZCxcbnRleHRhcmVhLm5nLWludmFsaWQubmctdG91Y2hlZCB7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHJlZDtcbn1cblxuLmJ0bjpub3QoOmxhc3QtY2hpbGQpIHtcbiAgbWFyZ2luLXJpZ2h0OiAwLjI1cmVtO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormArray","FormControl","FormGroup","Validators","i0","RecipeEditComponent","constructor","route","recipeService","router","store","ngOnInit","params","subscribe","id","editMode","initForm","onSubmit","updateRecipe","recipeForm","value","addRecipe","onCancel","onAddIngredient","get","push","name","required","amount","pattern","onDeleteIngredient","index","removeAt","controls","navigate","relativeTo","recipeName","recipeImagePath","recipeDescription","recipeIngredients","recipe","getRecipe","imagePath","description","ingredient","ingredients","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/recipes/recipe-edit/recipe-edit.component.ts","/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/recipes/recipe-edit/recipe-edit.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport { FormArray, FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport { ActivatedRoute, Params, Router } from \"@angular/router\";\nimport { Store } from \"@ngrx/store\";\nimport { RecipeService } from \"../recipe.service\";\nimport * as from '';\n\n@Component({\n  selector: \"app-recipe-edit\",\n  templateUrl: \"./recipe-edit.component.html\",\n  styleUrls: [\"./recipe-edit.component.css\"],\n})\nexport class RecipeEditComponent implements OnInit {\n  id: number;\n  editMode = false;\n  recipeForm: FormGroup;\n\n  constructor(\n    private route: ActivatedRoute,\n    private recipeService: RecipeService,\n    private router: Router,\n    private store: Store\n  ) {}\n\n  ngOnInit() {\n    this.route.params.subscribe((params: Params) => {\n      this.id = +params[\"id\"];\n      this.editMode = params[\"id\"] != null;\n      this.initForm();\n    });\n  }\n\n  onSubmit() {\n    // const newRecipe = new Recipe(\n    //   this.recipeForm.value[\"name\"],\n    //   this.recipeForm.value[\"description\"],\n    //   this.recipeForm.value[\"imagePath\"],\n    //   this.recipeForm.value[\"ingredients\"]\n    // );\n    if (this.editMode) {\n      this.recipeService.updateRecipe(this.id, this.recipeForm.value);\n    } else {\n      this.recipeService.addRecipe(this.recipeForm.value);\n    }\n    this.onCancel();\n  }\n\n  onAddIngredient() {\n    (<FormArray>this.recipeForm.get(\"ingredients\")).push(\n      new FormGroup({\n        name: new FormControl(null, Validators.required),\n        amount: new FormControl(null, [\n          Validators.required,\n          Validators.pattern(/^[1-9]+[0-9]*$/),\n        ]),\n      })\n    );\n  }\n\n  onDeleteIngredient(index: number) {\n    (<FormArray>this.recipeForm.get(\"ingredients\")).removeAt(index);\n  }\n\n  get controls() {\n    return (<FormArray>this.recipeForm.get(\"ingredients\")).controls;\n  }\n\n  onCancel() {\n    this.router.navigate([\"../\"], { relativeTo: this.route });\n  }\n\n  private initForm() {\n    let recipeName = \"\";\n    let recipeImagePath = \"\";\n    let recipeDescription = \"\";\n    let recipeIngredients = new FormArray([]);\n\n    if (this.editMode) {\n      const recipe = this.recipeService.getRecipe(this.id);\n      recipeName = recipe.name;\n      recipeImagePath = recipe.imagePath;\n      recipeDescription = recipe.description;\n      if (recipe[\"ingredients\"]) {\n        for (let ingredient of recipe.ingredients) {\n          // bug fixed, explicitly added type of <FormArray> ad VS Code suggested to add <unknown>\n          (<FormArray>(<unknown>recipeIngredients)).push(\n            new FormGroup({\n              name: new FormControl(ingredient.name, Validators.required),\n              amount: new FormControl(ingredient.amount, [\n                Validators.required,\n                Validators.pattern(/^[1-9]+[0-9]*$/),\n              ]),\n            })\n          );\n        }\n      }\n    }\n\n    this.recipeForm = new FormGroup({\n      name: new FormControl(recipeName, Validators.required),\n      imagePath: new FormControl(recipeImagePath, Validators.required),\n      description: new FormControl(recipeDescription, Validators.required),\n      ingredients: recipeIngredients,\n    });\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-xs-12\">\n    <form [formGroup]=\"recipeForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <button\n            type=\"submit\"\n            class=\"btn btn-success\"\n            [disabled]=\"!recipeForm.valid\"\n          >\n            Save\n          </button>\n          <button type=\"button\" class=\"btn btn-danger\" (click)=\"onCancel()\">\n            Cancel\n          </button>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <div class=\"form-group\">\n            <label for=\"name\">Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              formControlName=\"name\"\n              class=\"form-control\"\n            />\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <div class=\"form-group\">\n            <label for=\"imagePath\">Image URL</label>\n            <input\n              type=\"text\"\n              id=\"imagePath\"\n              formControlName=\"imagePath\"\n              class=\"form-control\"\n              #imagePath\n            />\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <img [src]=\"imagePath.value\" class=\"img-responsive\" />\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <div class=\"form-group\">\n            <label for=\"description\">Description</label>\n            <textarea\n              type=\"text\"\n              id=\"description\"\n              formControlName=\"description\"\n              class=\"form-control\"\n              rows=\"6\"\n            ></textarea>\n          </div>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-xs-12\" formArrayName=\"ingredients\">\n          <div\n            class=\"row\"\n            *ngFor=\"let ingredientCtrl of controls; let i = index\"\n            [formGroupName]=\"i\"\n            style=\"margin-top: 10px\"\n          >\n            <div class=\"col-xs-8\">\n              <input type=\"text\" class=\"form-control\" formControlName=\"name\" />\n            </div>\n            <div class=\"col-xs-2\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                formControlName=\"amount\"\n              />\n            </div>\n            <div class=\"col-xs-2\">\n              <button\n                type=\"button\"\n                class=\"btn btn-danger\"\n                (click)=\"onDeleteIngredient(i)\"\n              >\n                X\n              </button>\n            </div>\n          </div>\n          <hr />\n          <div class=\"row\">\n            <div class=\"col-xs-12\">\n              <button\n                type=\"button\"\n                class=\"btn btn-success\"\n                (click)=\"onAddIngredient()\"\n              >\n                Add Ingredient\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}