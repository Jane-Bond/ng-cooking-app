{"ast":null,"code":"import { ofType } from \"@ngrx/effects\";\nimport { catchError, switchMap, map, tap } from \"rxjs/operators\";\nimport * as AuthActions from \"./auth.actions\";\nimport { environment } from \"src/environments/environment\";\nimport { createEffect } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { User } from \"../user.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nconst handleAuthentication = (expiresIn, email, userId, token) => {\n  const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n  const user = new User(email, userId, token, expirationDate);\n  localStorage.setItem(\"userData\", JSON.stringify(user));\n  return new AuthActions.AuthenticateSuccess({\n    email: email,\n    userId: userId,\n    token: token,\n    expirationDate: expirationDate\n  });\n};\nconst handleError = errorRes => {\n  let errorMessage = \"An unknown error occured!\";\n  if (!errorRes.error || !errorRes.error.error) {\n    return of(new AuthActions.AuthenticateFail(errorMessage));\n  }\n  switch (errorRes.error.error.message) {\n    case \"EMAIL_EXISTS\":\n      errorMessage = \"This email already exists\";\n      break;\n    case \"EMAIL_NOT_FOUND\":\n      errorMessage = \"This email is not found\";\n      break;\n    case \"INVALID_PASSWORD\":\n      errorMessage = \"Wrong password\";\n  }\n  return of(new AuthActions.AuthenticateFail(errorMessage));\n};\nexport class AuthEffects {\n  constructor(actions$, http, router) {\n    this.actions$ = actions$;\n    this.http = http;\n    this.router = router;\n    this.authSignup = createEffect(() => this.actions$.pipe(ofType(AuthActions.SIGNUP_START), switchMap(signupAction => {\n      return this.http.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=\" + environment.firebaseAPIKey, {\n        email: signupAction.payload.email,\n        password: signupAction.payload.password,\n        returnSecureToken: true\n      }).pipe(map(resData => {\n        return handleAuthentication(+resData.expiresIn, resData.email, resData.localId, resData.idToken);\n      }), catchError(errorRes => {\n        //...return non-error Observable so our stream doesn't die\n        return handleError(errorRes);\n      }));\n    })), {\n      dispatch: false\n    });\n    this.authLogin = createEffect(() => this.actions$.pipe(ofType(AuthActions.LOGIN_START), switchMap(authData => {\n      return this.http.post(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\" + environment.firebaseAPIKey, {\n        email: authData.payload.email,\n        password: authData.payload.password,\n        returnSecureToken: true\n      }).pipe(map(resData => {\n        return handleAuthentication(+resData.expiresIn, resData.email, resData.localId, resData.idToken);\n      }), catchError(errorRes => {\n        //...return non-error Observable so our stream doesn't die\n        return handleError(errorRes);\n      }));\n    })));\n    this.authRedirect = createEffect(() => this.actions$.pipe(ofType(AuthActions.AUTHENTICATE_SUCCESS, AuthActions.LOGOUT), tap(() => {\n      this.router.navigate([\"/\"]);\n    })), {\n      dispatch: false\n    });\n    this.autoLogin = createEffect(() => this.actions$.pipe(ofType(AuthActions.AUTO_LOGIN)), map(() => {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (!userData) {\n        return;\n      }\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n      if (loadedUser.token) {\n        return new AuthActions.AuthenticateSuccess({\n          email: loadedUser.email,\n          userId: loadedUser.id,\n          token: loadedUser.token,\n          expirationDate: new Date(userData._tokenExpirationDate)\n        });\n      }\n      return {};\n    }), {\n      dispatch: false\n    });\n    this.authLogout = createEffect(() => this.actions$.pipe(ofType(AuthActions.LOGOUT), tap(() => {\n      localStorage.removeItem(\"userData\");\n    })), {\n      dispatch: false\n    });\n  }\n}\nAuthEffects.ɵfac = function AuthEffects_Factory(t) {\n  return new (t || AuthEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Router));\n};\nAuthEffects.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthEffects,\n  factory: AuthEffects.ɵfac\n});","map":{"version":3,"mappings":"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","names":["ofType","catchError","switchMap","map","tap","AuthActions","environment","createEffect","of","User","handleAuthentication","expiresIn","email","userId","token","expirationDate","Date","getTime","user","localStorage","setItem","JSON","stringify","AuthenticateSuccess","handleError","errorRes","errorMessage","error","AuthenticateFail","message","AuthEffects","constructor","actions$","http","router","pipe","SIGNUP_START","signupAction","post","firebaseAPIKey","payload","password","returnSecureToken","resData","localId","idToken","dispatch","LOGIN_START","authData","AUTHENTICATE_SUCCESS","LOGOUT","navigate","AUTO_LOGIN","userData","parse","getItem","loadedUser","id","_token","_tokenExpirationDate","removeItem","factory"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/auth/store/auth.effects.ts"],"sourcesContent":["import { HttpClient } from \"@angular/common/http\";\nimport { Actions, ofType } from \"@ngrx/effects\";\nimport { catchError, switchMap, map, tap } from \"rxjs/operators\";\nimport * as AuthActions from \"./auth.actions\";\nimport { environment } from \"src/environments/environment\";\nimport { createEffect } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { User } from \"../user.model\";\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\nconst handleAuthentication = (\n  expiresIn: number,\n  email: string,\n  userId: string,\n  token: string\n) => {\n  const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n  const user = new User(email, userId, token, expirationDate);\n  localStorage.setItem(\"userData\", JSON.stringify(user));\n\n  return new AuthActions.AuthenticateSuccess({\n    email: email,\n    userId: userId,\n    token: token,\n    expirationDate: expirationDate,\n  });\n};\n\nconst handleError = (errorRes: any) => {\n  let errorMessage = \"An unknown error occured!\";\n  if (!errorRes.error || !errorRes.error.error) {\n    return of(new AuthActions.AuthenticateFail(errorMessage));\n  }\n  switch (errorRes.error.error.message) {\n    case \"EMAIL_EXISTS\":\n      errorMessage = \"This email already exists\";\n      break;\n    case \"EMAIL_NOT_FOUND\":\n      errorMessage = \"This email is not found\";\n      break;\n    case \"INVALID_PASSWORD\":\n      errorMessage = \"Wrong password\";\n  }\n  return of(new AuthActions.AuthenticateFail(errorMessage));\n};\n\n@Injectable()\nexport class AuthEffects {\n  authSignup = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.SIGNUP_START),\n        switchMap((signupAction: AuthActions.SignupStart) => {\n          return this.http\n            .post<AuthResponseData>(\n              \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=\" +\n                environment.firebaseAPIKey,\n              {\n                email: signupAction.payload.email,\n                password: signupAction.payload.password,\n                returnSecureToken: true,\n              }\n            )\n            .pipe(\n              map((resData) => {\n                return handleAuthentication(\n                  +resData.expiresIn,\n                  resData.email,\n                  resData.localId,\n                  resData.idToken\n                );\n              }),\n              catchError((errorRes) => {\n                //...return non-error Observable so our stream doesn't die\n                return handleError(errorRes);\n              })\n            );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  authLogin = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AuthActions.LOGIN_START),\n      switchMap((authData: AuthActions.LoginStart) => {\n        return this.http\n          .post<AuthResponseData>(\n            \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=\" +\n              environment.firebaseAPIKey,\n            {\n              email: authData.payload.email,\n              password: authData.payload.password,\n              returnSecureToken: true,\n            }\n          )\n          .pipe(\n            map((resData) => {\n              return handleAuthentication(\n                +resData.expiresIn,\n                resData.email,\n                resData.localId,\n                resData.idToken\n              );\n            }),\n            catchError((errorRes) => {\n              //...return non-error Observable so our stream doesn't die\n              return handleError(errorRes);\n            })\n          );\n      })\n    )\n  );\n\n  authRedirect = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.AUTHENTICATE_SUCCESS, AuthActions.LOGOUT),\n        tap(() => {\n          this.router.navigate([\"/\"]);\n        })\n      ),\n    { dispatch: false }\n  );\n\n  autoLogin = createEffect(\n    () => this.actions$.pipe(ofType(AuthActions.AUTO_LOGIN)),\n    map(() => {\n      const userData: {\n        email: string;\n        id: string;\n        _token: string;\n        _tokenExpirationDate: string;\n      } = JSON.parse(localStorage.getItem(\"userData\"));\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new User(\n        userData.email,\n        userData.id,\n        userData._token,\n        new Date(userData._tokenExpirationDate)\n      );\n\n      if (loadedUser.token) {\n        return new AuthActions.AuthenticateSuccess({\n          email: loadedUser.email,\n          userId: loadedUser.id,\n          token: loadedUser.token,\n          expirationDate: new Date(userData._tokenExpirationDate),\n        });\n      }\n      return {};\n    }),\n    { dispatch: false }\n  );\n\n  authLogout = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AuthActions.LOGOUT),\n        tap(() => {\n          localStorage.removeItem(\"userData\");\n        })\n      ),\n    { dispatch: false }\n  );\n\n  constructor(\n    private actions$: Actions,\n    private http: HttpClient,\n    private router: Router\n  ) {}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}