{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@ngrx/effects\";\nexport class RecipesResolverService {\n  constructor(store, actions$) {\n    this.store = store;\n    this.actions$ = actions$;\n  }\n  resolve(route, state) {\n    return this.dataStorageService.fetchRecipes();\n  }\n}\nRecipesResolverService.ɵfac = function RecipesResolverService_Factory(t) {\n  return new (t || RecipesResolverService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Actions));\n};\nRecipesResolverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RecipesResolverService,\n  factory: RecipesResolverService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":";;;AAgBA,OAAM,MAAOA,sBAAsB;EACjCC,YACUC,KAA8B,EAC9BC,QAAiB;IADjB,UAAK,GAALD,KAAK;IACL,aAAQ,GAARC,QAAQ;EACf;EAEHC,OAAO,CAACC,KAA6B,EAAEC,KAA0B;IAC/D,OAAO,IAAI,CAACC,kBAAkB,CAACC,YAAY,EAAE;EAC/C;;AARWR,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAS,SAAtBT,sBAAsB;EAAAU,YADT;AAAM","names":["RecipesResolverService","constructor","store","actions$","resolve","route","state","dataStorageService","fetchRecipes","factory","providedIn"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/recipes/recipes-resolver.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot,\n} from \"@angular/router\";\nimport { Store } from \"@ngrx/store\";\nimport { Actions, ofType } from \"@ngrx/effects\";\nimport { take, map } from \"rxjs/operators\";\n\nimport { Recipe } from \"./recipe.model\";\nimport { DataStorageService } from \"../shared/data-storage.service\";\nimport * as fromApp from \"../store/app.reducer\";\nimport * as RecipeActions from \"../recipes/store/recipe.actions\";\n\n@Injectable({ providedIn: \"root\" })\nexport class RecipesResolverService implements Resolve<Recipe[]> {\n  constructor(\n    private store: Store<fromApp.AppState>,\n    private actions$: Actions\n  ) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    return this.dataStorageService.fetchRecipes();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}