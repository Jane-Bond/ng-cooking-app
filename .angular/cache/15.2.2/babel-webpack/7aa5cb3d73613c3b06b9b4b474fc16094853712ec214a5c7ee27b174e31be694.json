{"ast":null,"code":"import * as i1 from '@ngrx/store';\nimport { createAction, props, isNgrxMockEnvironment, select, ACTIVE_RUNTIME_CHECKS, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, makeEnvironmentProviders, ENVIRONMENT_INITIALIZER, inject, NgModule } from '@angular/core';\nimport * as i2 from '@angular/router';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nconst ROUTER_REQUEST = '@ngrx/router-store/request';\nconst routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\nconst ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nconst routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\nconst ROUTER_CANCEL = '@ngrx/router-store/cancel';\nconst routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\nconst ROUTER_ERROR = '@ngrx/router-store/error';\nconst routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nconst ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nconst routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\nfunction routerReducer(state, action) {\n  // Allow compilation with strictFunctionTypes - ref: #1344\n  const routerAction = action;\n  switch (routerAction.type) {\n    case ROUTER_NAVIGATION:\n    case ROUTER_ERROR:\n    case ROUTER_CANCEL:\n      return {\n        state: routerAction.payload.routerState,\n        navigationId: routerAction.payload.event.id\n      };\n    default:\n      return state;\n  }\n}\nclass MinimalRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      title: route.title,\n      routeConfig: route.routeConfig ? {\n        path: route.routeConfig.path,\n        pathMatch: route.routeConfig.pathMatch,\n        redirectTo: route.routeConfig.redirectTo,\n        outlet: route.routeConfig.outlet,\n        title: typeof route.routeConfig.title === 'string' ? route.routeConfig.title : undefined\n      } : null,\n      queryParams: route.queryParams,\n      fragment: route.fragment,\n      firstChild: children[0],\n      children\n    };\n  }\n}\nvar NavigationActionTiming;\n(function (NavigationActionTiming) {\n  NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n  NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\nconst DEFAULT_ROUTER_FEATURENAME = 'router';\nconst _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\nconst ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nfunction _createRouterConfig(config) {\n  return {\n    stateKey: DEFAULT_ROUTER_FEATURENAME,\n    serializer: MinimalRouterStateSerializer,\n    navigationActionTiming: NavigationActionTiming.PreActivation,\n    ...config\n  };\n}\nclass FullRouterStateSerializer {\n  serialize(routerState) {\n    return {\n      root: this.serializeRoute(routerState.root),\n      url: routerState.url\n    };\n  }\n  serializeRoute(route) {\n    const children = route.children.map(c => this.serializeRoute(c));\n    return {\n      params: route.params,\n      paramMap: route.paramMap,\n      data: route.data,\n      url: route.url,\n      outlet: route.outlet,\n      title: route.title,\n      routeConfig: route.routeConfig ? {\n        component: route.routeConfig.component,\n        path: route.routeConfig.path,\n        pathMatch: route.routeConfig.pathMatch,\n        redirectTo: route.routeConfig.redirectTo,\n        outlet: route.routeConfig.outlet,\n        title: route.routeConfig.title\n      } : null,\n      queryParams: route.queryParams,\n      queryParamMap: route.queryParamMap,\n      fragment: route.fragment,\n      component: route.routeConfig ? route.routeConfig.component : undefined,\n      root: undefined,\n      parent: undefined,\n      firstChild: children[0],\n      pathFromRoot: undefined,\n      children\n    };\n  }\n}\nclass RouterStateSerializer {}\nvar RouterTrigger;\n(function (RouterTrigger) {\n  RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n  RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n  RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Shared router initialization logic used alongside both the StoreRouterConnectingModule and the provideRouterStore\n * function\n */\nclass StoreRouterConnectingService {\n  constructor(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n    this.store = store;\n    this.router = router;\n    this.serializer = serializer;\n    this.errorHandler = errorHandler;\n    this.config = config;\n    this.activeRuntimeChecks = activeRuntimeChecks;\n    this.lastEvent = null;\n    this.routerState = null;\n    this.trigger = RouterTrigger.NONE;\n    this.stateKey = this.config.stateKey;\n    if (!isNgrxMockEnvironment() && isDevMode() && (activeRuntimeChecks?.strictActionSerializability || activeRuntimeChecks?.strictStateSerializability) && this.serializer instanceof FullRouterStateSerializer) {\n      console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' + 'with the FullRouterStateSerializer. The FullRouterStateSerializer ' + 'has an unserializable router state and actions that are not serializable. ' + 'To use the serializability runtime checks either use ' + 'the MinimalRouterStateSerializer or implement a custom router state serializer.');\n    }\n    this.setUpStoreStateListener();\n    this.setUpRouterEventsListener();\n  }\n  setUpStoreStateListener() {\n    this.store.pipe(select(this.stateKey), withLatestFrom(this.store)).subscribe(([routerStoreState, storeState]) => {\n      this.navigateIfNeeded(routerStoreState, storeState);\n    });\n  }\n  navigateIfNeeded(routerStoreState, storeState) {\n    if (!routerStoreState || !routerStoreState.state) {\n      return;\n    }\n    if (this.trigger === RouterTrigger.ROUTER) {\n      return;\n    }\n    if (this.lastEvent instanceof NavigationStart) {\n      return;\n    }\n    const url = routerStoreState.state.url;\n    if (!isSameUrl(this.router.url, url)) {\n      this.storeState = storeState;\n      this.trigger = RouterTrigger.STORE;\n      this.router.navigateByUrl(url).catch(error => {\n        this.errorHandler.handleError(error);\n      });\n    }\n  }\n  setUpRouterEventsListener() {\n    const dispatchNavLate = this.config.navigationActionTiming === NavigationActionTiming.PostActivation;\n    let routesRecognized;\n    this.router.events.pipe(withLatestFrom(this.store)).subscribe(([event, storeState]) => {\n      this.lastEvent = event;\n      if (event instanceof NavigationStart) {\n        this.routerState = this.serializer.serialize(this.router.routerState.snapshot);\n        if (this.trigger !== RouterTrigger.STORE) {\n          this.storeState = storeState;\n          this.dispatchRouterRequest(event);\n        }\n      } else if (event instanceof RoutesRecognized) {\n        routesRecognized = event;\n        if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n          this.dispatchRouterNavigation(event);\n        }\n      } else if (event instanceof NavigationCancel) {\n        this.dispatchRouterCancel(event);\n        this.reset();\n      } else if (event instanceof NavigationError) {\n        this.dispatchRouterError(event);\n        this.reset();\n      } else if (event instanceof NavigationEnd) {\n        if (this.trigger !== RouterTrigger.STORE) {\n          if (dispatchNavLate) {\n            this.dispatchRouterNavigation(routesRecognized);\n          }\n          this.dispatchRouterNavigated(event);\n        }\n        this.reset();\n      }\n    });\n  }\n  dispatchRouterRequest(event) {\n    this.dispatchRouterAction(ROUTER_REQUEST, {\n      event\n    });\n  }\n  dispatchRouterNavigation(lastRoutesRecognized) {\n    const nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n    this.dispatchRouterAction(ROUTER_NAVIGATION, {\n      routerState: nextRouterState,\n      event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState)\n    });\n  }\n  dispatchRouterCancel(event) {\n    this.dispatchRouterAction(ROUTER_CANCEL, {\n      storeState: this.storeState,\n      event\n    });\n  }\n  dispatchRouterError(event) {\n    this.dispatchRouterAction(ROUTER_ERROR, {\n      storeState: this.storeState,\n      event: new NavigationError(event.id, event.url, `${event}`)\n    });\n  }\n  dispatchRouterNavigated(event) {\n    const routerState = this.serializer.serialize(this.router.routerState.snapshot);\n    this.dispatchRouterAction(ROUTER_NAVIGATED, {\n      event,\n      routerState\n    });\n  }\n  dispatchRouterAction(type, payload) {\n    this.trigger = RouterTrigger.ROUTER;\n    try {\n      this.store.dispatch({\n        type,\n        payload: {\n          routerState: this.routerState,\n          ...payload,\n          event: this.config.routerState === 0 /* RouterState.Full */ ? payload.event : {\n            id: payload.event.id,\n            url: payload.event.url,\n            // safe, as it will just be `undefined` for non-NavigationEnd router events\n            urlAfterRedirects: payload.event.urlAfterRedirects\n          }\n        }\n      });\n    } finally {\n      this.trigger = RouterTrigger.NONE;\n    }\n  }\n  reset() {\n    this.trigger = RouterTrigger.NONE;\n    this.storeState = null;\n    this.routerState = null;\n  }\n}\n/** @nocollapse */\nStoreRouterConnectingService.ɵfac = function StoreRouterConnectingService_Factory(t) {\n  return new (t || StoreRouterConnectingService)(i0.ɵɵinject(i1.Store), i0.ɵɵinject(i2.Router), i0.ɵɵinject(RouterStateSerializer), i0.ɵɵinject(i0.ErrorHandler), i0.ɵɵinject(ROUTER_CONFIG), i0.ɵɵinject(ACTIVE_RUNTIME_CHECKS));\n};\n/** @nocollapse */\nStoreRouterConnectingService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: StoreRouterConnectingService,\n  factory: StoreRouterConnectingService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreRouterConnectingService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Store\n    }, {\n      type: i2.Router\n    }, {\n      type: RouterStateSerializer\n    }, {\n      type: i0.ErrorHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ROUTER_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [ACTIVE_RUNTIME_CHECKS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\nfunction isSameUrl(first, second) {\n  return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\nfunction stripTrailingSlash(text) {\n  if (text?.length > 0 && text[text.length - 1] === '/') {\n    return text.substring(0, text.length - 1);\n  }\n  return text;\n}\n\n/**\n * Connects the Angular Router to the Store.\n *\n * @usageNotes\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideStore({ router: routerReducer }),\n *     provideRouterStore(),\n *   ],\n * });\n * ```\n */\nfunction provideRouterStore(config = {}) {\n  return makeEnvironmentProviders([{\n    provide: _ROUTER_CONFIG,\n    useValue: config\n  }, {\n    provide: ROUTER_CONFIG,\n    useFactory: _createRouterConfig,\n    deps: [_ROUTER_CONFIG]\n  }, {\n    provide: RouterStateSerializer,\n    useClass: config.serializer ? config.serializer : config.routerState === 0 /* RouterState.Full */ ? FullRouterStateSerializer : MinimalRouterStateSerializer\n  }, {\n    provide: ENVIRONMENT_INITIALIZER,\n    multi: true,\n    useFactory() {\n      return () => inject(StoreRouterConnectingService);\n    }\n  }, StoreRouterConnectingService]);\n}\n\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nclass StoreRouterConnectingModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: StoreRouterConnectingModule,\n      providers: [provideRouterStore(config)]\n    };\n  }\n}\n/** @nocollapse */\nStoreRouterConnectingModule.ɵfac = function StoreRouterConnectingModule_Factory(t) {\n  return new (t || StoreRouterConnectingModule)();\n};\n/** @nocollapse */\nStoreRouterConnectingModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: StoreRouterConnectingModule\n});\n/** @nocollapse */\nStoreRouterConnectingModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StoreRouterConnectingModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\nfunction createRouterSelector() {\n  return createFeatureSelector(DEFAULT_ROUTER_FEATURENAME);\n}\n/**\n * @deprecated This function is deprecated in favor of `getRouterSelectors`.\n * For more info see: https://github.com/ngrx/platform/issues/3738\n */\nconst getSelectors = getRouterSelectors;\nfunction getRouterSelectors(selectState = createRouterSelector()) {\n  const selectRouterState = createSelector(selectState, router => router && router.state);\n  const selectRootRoute = createSelector(selectRouterState, routerState => routerState && routerState.root);\n  const selectCurrentRoute = createSelector(selectRootRoute, rootRoute => {\n    if (!rootRoute) {\n      return undefined;\n    }\n    let route = rootRoute;\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n    return route;\n  });\n  const selectFragment = createSelector(selectRootRoute, route => route && route.fragment);\n  const selectQueryParams = createSelector(selectRootRoute, route => route && route.queryParams);\n  const selectQueryParam = param => createSelector(selectQueryParams, params => params && params[param]);\n  const selectRouteParams = createSelector(selectCurrentRoute, route => route && route.params);\n  const selectRouteParam = param => createSelector(selectRouteParams, params => params && params[param]);\n  const selectRouteData = createSelector(selectCurrentRoute, route => route && route.data);\n  const selectRouteDataParam = param => createSelector(selectRouteData, data => data && data[param]);\n  const selectUrl = createSelector(selectRouterState, routerState => routerState && routerState.url);\n  const selectTitle = createSelector(selectCurrentRoute, route => {\n    if (!route?.routeConfig) {\n      return undefined;\n    }\n    return typeof route.routeConfig.title === 'string' ? route.routeConfig.title // static title\n    : route.title; // resolved title\n  });\n\n  return {\n    selectCurrentRoute,\n    selectFragment,\n    selectQueryParams,\n    selectQueryParam,\n    selectRouteParams,\n    selectRouteParam,\n    selectRouteData,\n    selectRouteDataParam,\n    selectUrl,\n    selectTitle\n  };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_ROUTER_FEATURENAME, FullRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, createRouterSelector, getRouterSelectors, getSelectors, provideRouterStore, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction };\n//# sourceMappingURL=ngrx-router-store.mjs.map","map":{"version":3,"names":["i1","createAction","props","isNgrxMockEnvironment","select","ACTIVE_RUNTIME_CHECKS","createFeatureSelector","createSelector","i0","InjectionToken","isDevMode","Injectable","Inject","makeEnvironmentProviders","ENVIRONMENT_INITIALIZER","inject","NgModule","i2","NavigationStart","RoutesRecognized","NavigationCancel","NavigationError","NavigationEnd","withLatestFrom","ROUTER_REQUEST","routerRequestAction","ROUTER_NAVIGATION","routerNavigationAction","ROUTER_CANCEL","routerCancelAction","ROUTER_ERROR","routerErrorAction","ROUTER_NAVIGATED","routerNavigatedAction","routerReducer","state","action","routerAction","type","payload","routerState","navigationId","event","id","MinimalRouterStateSerializer","serialize","root","serializeRoute","url","route","children","map","c","params","data","outlet","title","routeConfig","path","pathMatch","redirectTo","undefined","queryParams","fragment","firstChild","NavigationActionTiming","DEFAULT_ROUTER_FEATURENAME","_ROUTER_CONFIG","ROUTER_CONFIG","_createRouterConfig","config","stateKey","serializer","navigationActionTiming","PreActivation","FullRouterStateSerializer","paramMap","component","queryParamMap","parent","pathFromRoot","RouterStateSerializer","RouterTrigger","StoreRouterConnectingService","constructor","store","router","errorHandler","activeRuntimeChecks","lastEvent","trigger","NONE","strictActionSerializability","strictStateSerializability","console","warn","setUpStoreStateListener","setUpRouterEventsListener","pipe","subscribe","routerStoreState","storeState","navigateIfNeeded","ROUTER","isSameUrl","STORE","navigateByUrl","catch","error","handleError","dispatchNavLate","PostActivation","routesRecognized","events","snapshot","dispatchRouterRequest","dispatchRouterNavigation","dispatchRouterCancel","reset","dispatchRouterError","dispatchRouterNavigated","dispatchRouterAction","lastRoutesRecognized","nextRouterState","urlAfterRedirects","dispatch","ɵfac","Store","Router","ErrorHandler","ɵprov","decorators","args","first","second","stripTrailingSlash","text","length","substring","provideRouterStore","provide","useValue","useFactory","deps","useClass","multi","StoreRouterConnectingModule","forRoot","ngModule","providers","ɵmod","ɵinj","createRouterSelector","getSelectors","getRouterSelectors","selectState","selectRouterState","selectRootRoute","selectCurrentRoute","rootRoute","selectFragment","selectQueryParams","selectQueryParam","param","selectRouteParams","selectRouteParam","selectRouteData","selectRouteDataParam","selectUrl","selectTitle"],"sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/node_modules/@ngrx/router-store/fesm2020/ngrx-router-store.mjs"],"sourcesContent":["import * as i1 from '@ngrx/store';\nimport { createAction, props, isNgrxMockEnvironment, select, ACTIVE_RUNTIME_CHECKS, createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, makeEnvironmentProviders, ENVIRONMENT_INITIALIZER, inject, NgModule } from '@angular/core';\nimport * as i2 from '@angular/router';\nimport { NavigationStart, RoutesRecognized, NavigationCancel, NavigationError, NavigationEnd } from '@angular/router';\nimport { withLatestFrom } from 'rxjs/operators';\n\n/**\n * An action dispatched when a router navigation request is fired.\n */\nconst ROUTER_REQUEST = '@ngrx/router-store/request';\nconst routerRequestAction = createAction(ROUTER_REQUEST, props());\n/**\n * An action dispatched when the router navigates.\n */\nconst ROUTER_NAVIGATION = '@ngrx/router-store/navigation';\nconst routerNavigationAction = createAction(ROUTER_NAVIGATION, props());\n/**\n * An action dispatched when the router cancels navigation.\n */\nconst ROUTER_CANCEL = '@ngrx/router-store/cancel';\nconst routerCancelAction = createAction(ROUTER_CANCEL, props());\n/**\n * An action dispatched when the router errors.\n */\nconst ROUTER_ERROR = '@ngrx/router-store/error';\nconst routerErrorAction = createAction(ROUTER_ERROR, props());\n/**\n * An action dispatched after navigation has ended and new route is active.\n */\nconst ROUTER_NAVIGATED = '@ngrx/router-store/navigated';\nconst routerNavigatedAction = createAction(ROUTER_NAVIGATED, props());\n\nfunction routerReducer(state, action) {\n    // Allow compilation with strictFunctionTypes - ref: #1344\n    const routerAction = action;\n    switch (routerAction.type) {\n        case ROUTER_NAVIGATION:\n        case ROUTER_ERROR:\n        case ROUTER_CANCEL:\n            return {\n                state: routerAction.payload.routerState,\n                navigationId: routerAction.payload.event.id,\n            };\n        default:\n            return state;\n    }\n}\n\nclass MinimalRouterStateSerializer {\n    serialize(routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    }\n    serializeRoute(route) {\n        const children = route.children.map((c) => this.serializeRoute(c));\n        return {\n            params: route.params,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            title: route.title,\n            routeConfig: route.routeConfig\n                ? {\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                    title: typeof route.routeConfig.title === 'string'\n                        ? route.routeConfig.title\n                        : undefined,\n                }\n                : null,\n            queryParams: route.queryParams,\n            fragment: route.fragment,\n            firstChild: children[0],\n            children,\n        };\n    }\n}\n\nvar NavigationActionTiming;\n(function (NavigationActionTiming) {\n    NavigationActionTiming[NavigationActionTiming[\"PreActivation\"] = 1] = \"PreActivation\";\n    NavigationActionTiming[NavigationActionTiming[\"PostActivation\"] = 2] = \"PostActivation\";\n})(NavigationActionTiming || (NavigationActionTiming = {}));\nconst DEFAULT_ROUTER_FEATURENAME = 'router';\nconst _ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Internal Configuration');\nconst ROUTER_CONFIG = new InjectionToken('@ngrx/router-store Configuration');\nfunction _createRouterConfig(config) {\n    return {\n        stateKey: DEFAULT_ROUTER_FEATURENAME,\n        serializer: MinimalRouterStateSerializer,\n        navigationActionTiming: NavigationActionTiming.PreActivation,\n        ...config,\n    };\n}\n\nclass FullRouterStateSerializer {\n    serialize(routerState) {\n        return {\n            root: this.serializeRoute(routerState.root),\n            url: routerState.url,\n        };\n    }\n    serializeRoute(route) {\n        const children = route.children.map((c) => this.serializeRoute(c));\n        return {\n            params: route.params,\n            paramMap: route.paramMap,\n            data: route.data,\n            url: route.url,\n            outlet: route.outlet,\n            title: route.title,\n            routeConfig: route.routeConfig\n                ? {\n                    component: route.routeConfig.component,\n                    path: route.routeConfig.path,\n                    pathMatch: route.routeConfig.pathMatch,\n                    redirectTo: route.routeConfig.redirectTo,\n                    outlet: route.routeConfig.outlet,\n                    title: route.routeConfig.title,\n                }\n                : null,\n            queryParams: route.queryParams,\n            queryParamMap: route.queryParamMap,\n            fragment: route.fragment,\n            component: (route.routeConfig\n                ? route.routeConfig.component\n                : undefined),\n            root: undefined,\n            parent: undefined,\n            firstChild: children[0],\n            pathFromRoot: undefined,\n            children,\n        };\n    }\n}\n\nclass RouterStateSerializer {\n}\n\nvar RouterTrigger;\n(function (RouterTrigger) {\n    RouterTrigger[RouterTrigger[\"NONE\"] = 1] = \"NONE\";\n    RouterTrigger[RouterTrigger[\"ROUTER\"] = 2] = \"ROUTER\";\n    RouterTrigger[RouterTrigger[\"STORE\"] = 3] = \"STORE\";\n})(RouterTrigger || (RouterTrigger = {}));\n/**\n * Shared router initialization logic used alongside both the StoreRouterConnectingModule and the provideRouterStore\n * function\n */\nclass StoreRouterConnectingService {\n    constructor(store, router, serializer, errorHandler, config, activeRuntimeChecks) {\n        this.store = store;\n        this.router = router;\n        this.serializer = serializer;\n        this.errorHandler = errorHandler;\n        this.config = config;\n        this.activeRuntimeChecks = activeRuntimeChecks;\n        this.lastEvent = null;\n        this.routerState = null;\n        this.trigger = RouterTrigger.NONE;\n        this.stateKey = this.config.stateKey;\n        if (!isNgrxMockEnvironment() &&\n            isDevMode() &&\n            (activeRuntimeChecks?.strictActionSerializability ||\n                activeRuntimeChecks?.strictStateSerializability) &&\n            this.serializer instanceof FullRouterStateSerializer) {\n            console.warn('@ngrx/router-store: The serializability runtime checks cannot be enabled ' +\n                'with the FullRouterStateSerializer. The FullRouterStateSerializer ' +\n                'has an unserializable router state and actions that are not serializable. ' +\n                'To use the serializability runtime checks either use ' +\n                'the MinimalRouterStateSerializer or implement a custom router state serializer.');\n        }\n        this.setUpStoreStateListener();\n        this.setUpRouterEventsListener();\n    }\n    setUpStoreStateListener() {\n        this.store\n            .pipe(select(this.stateKey), withLatestFrom(this.store))\n            .subscribe(([routerStoreState, storeState]) => {\n            this.navigateIfNeeded(routerStoreState, storeState);\n        });\n    }\n    navigateIfNeeded(routerStoreState, storeState) {\n        if (!routerStoreState || !routerStoreState.state) {\n            return;\n        }\n        if (this.trigger === RouterTrigger.ROUTER) {\n            return;\n        }\n        if (this.lastEvent instanceof NavigationStart) {\n            return;\n        }\n        const url = routerStoreState.state.url;\n        if (!isSameUrl(this.router.url, url)) {\n            this.storeState = storeState;\n            this.trigger = RouterTrigger.STORE;\n            this.router.navigateByUrl(url).catch((error) => {\n                this.errorHandler.handleError(error);\n            });\n        }\n    }\n    setUpRouterEventsListener() {\n        const dispatchNavLate = this.config.navigationActionTiming ===\n            NavigationActionTiming.PostActivation;\n        let routesRecognized;\n        this.router.events\n            .pipe(withLatestFrom(this.store))\n            .subscribe(([event, storeState]) => {\n            this.lastEvent = event;\n            if (event instanceof NavigationStart) {\n                this.routerState = this.serializer.serialize(this.router.routerState.snapshot);\n                if (this.trigger !== RouterTrigger.STORE) {\n                    this.storeState = storeState;\n                    this.dispatchRouterRequest(event);\n                }\n            }\n            else if (event instanceof RoutesRecognized) {\n                routesRecognized = event;\n                if (!dispatchNavLate && this.trigger !== RouterTrigger.STORE) {\n                    this.dispatchRouterNavigation(event);\n                }\n            }\n            else if (event instanceof NavigationCancel) {\n                this.dispatchRouterCancel(event);\n                this.reset();\n            }\n            else if (event instanceof NavigationError) {\n                this.dispatchRouterError(event);\n                this.reset();\n            }\n            else if (event instanceof NavigationEnd) {\n                if (this.trigger !== RouterTrigger.STORE) {\n                    if (dispatchNavLate) {\n                        this.dispatchRouterNavigation(routesRecognized);\n                    }\n                    this.dispatchRouterNavigated(event);\n                }\n                this.reset();\n            }\n        });\n    }\n    dispatchRouterRequest(event) {\n        this.dispatchRouterAction(ROUTER_REQUEST, { event });\n    }\n    dispatchRouterNavigation(lastRoutesRecognized) {\n        const nextRouterState = this.serializer.serialize(lastRoutesRecognized.state);\n        this.dispatchRouterAction(ROUTER_NAVIGATION, {\n            routerState: nextRouterState,\n            event: new RoutesRecognized(lastRoutesRecognized.id, lastRoutesRecognized.url, lastRoutesRecognized.urlAfterRedirects, nextRouterState),\n        });\n    }\n    dispatchRouterCancel(event) {\n        this.dispatchRouterAction(ROUTER_CANCEL, {\n            storeState: this.storeState,\n            event,\n        });\n    }\n    dispatchRouterError(event) {\n        this.dispatchRouterAction(ROUTER_ERROR, {\n            storeState: this.storeState,\n            event: new NavigationError(event.id, event.url, `${event}`),\n        });\n    }\n    dispatchRouterNavigated(event) {\n        const routerState = this.serializer.serialize(this.router.routerState.snapshot);\n        this.dispatchRouterAction(ROUTER_NAVIGATED, { event, routerState });\n    }\n    dispatchRouterAction(type, payload) {\n        this.trigger = RouterTrigger.ROUTER;\n        try {\n            this.store.dispatch({\n                type,\n                payload: {\n                    routerState: this.routerState,\n                    ...payload,\n                    event: this.config.routerState === 0 /* RouterState.Full */\n                        ? payload.event\n                        : {\n                            id: payload.event.id,\n                            url: payload.event.url,\n                            // safe, as it will just be `undefined` for non-NavigationEnd router events\n                            urlAfterRedirects: payload.event\n                                .urlAfterRedirects,\n                        },\n                },\n            });\n        }\n        finally {\n            this.trigger = RouterTrigger.NONE;\n        }\n    }\n    reset() {\n        this.trigger = RouterTrigger.NONE;\n        this.storeState = null;\n        this.routerState = null;\n    }\n}\n/** @nocollapse */ StoreRouterConnectingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreRouterConnectingService, deps: [{ token: i1.Store }, { token: i2.Router }, { token: RouterStateSerializer }, { token: i0.ErrorHandler }, { token: ROUTER_CONFIG }, { token: ACTIVE_RUNTIME_CHECKS }], target: i0.ɵɵFactoryTarget.Injectable });\n/** @nocollapse */ StoreRouterConnectingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreRouterConnectingService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreRouterConnectingService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.Router }, { type: RouterStateSerializer }, { type: i0.ErrorHandler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ROUTER_CONFIG]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [ACTIVE_RUNTIME_CHECKS]\n                }] }]; } });\n/**\n * Check if the URLs are matching. Accounts for the possibility of trailing \"/\" in url.\n */\nfunction isSameUrl(first, second) {\n    return stripTrailingSlash(first) === stripTrailingSlash(second);\n}\nfunction stripTrailingSlash(text) {\n    if (text?.length > 0 && text[text.length - 1] === '/') {\n        return text.substring(0, text.length - 1);\n    }\n    return text;\n}\n\n/**\n * Connects the Angular Router to the Store.\n *\n * @usageNotes\n *\n * ```ts\n * bootstrapApplication(AppComponent, {\n *   providers: [\n *     provideStore({ router: routerReducer }),\n *     provideRouterStore(),\n *   ],\n * });\n * ```\n */\nfunction provideRouterStore(config = {}) {\n    return makeEnvironmentProviders([\n        { provide: _ROUTER_CONFIG, useValue: config },\n        {\n            provide: ROUTER_CONFIG,\n            useFactory: _createRouterConfig,\n            deps: [_ROUTER_CONFIG],\n        },\n        {\n            provide: RouterStateSerializer,\n            useClass: config.serializer\n                ? config.serializer\n                : config.routerState === 0 /* RouterState.Full */\n                    ? FullRouterStateSerializer\n                    : MinimalRouterStateSerializer,\n        },\n        {\n            provide: ENVIRONMENT_INITIALIZER,\n            multi: true,\n            useFactory() {\n                return () => inject(StoreRouterConnectingService);\n            },\n        },\n        StoreRouterConnectingService,\n    ]);\n}\n\n/**\n * Connects RouterModule with StoreModule.\n *\n * During the navigation, before any guards or resolvers run, the router will dispatch\n * a ROUTER_NAVIGATION action, which has the following signature:\n *\n * ```\n * export type RouterNavigationPayload = {\n *   routerState: SerializedRouterStateSnapshot,\n *   event: RoutesRecognized\n * }\n * ```\n *\n * Either a reducer or an effect can be invoked in response to this action.\n * If the invoked reducer throws, the navigation will be canceled.\n *\n * If navigation gets canceled because of a guard, a ROUTER_CANCEL action will be\n * dispatched. If navigation results in an error, a ROUTER_ERROR action will be dispatched.\n *\n * Both ROUTER_CANCEL and ROUTER_ERROR contain the store state before the navigation\n * which can be used to restore the consistency of the store.\n *\n * Usage:\n *\n * ```typescript\n * @NgModule({\n *   declarations: [AppCmp, SimpleCmp],\n *   imports: [\n *     BrowserModule,\n *     StoreModule.forRoot(mapOfReducers),\n *     RouterModule.forRoot([\n *       { path: '', component: SimpleCmp },\n *       { path: 'next', component: SimpleCmp }\n *     ]),\n *     StoreRouterConnectingModule.forRoot()\n *   ],\n *   bootstrap: [AppCmp]\n * })\n * export class AppModule {\n * }\n * ```\n */\nclass StoreRouterConnectingModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: StoreRouterConnectingModule,\n            providers: [provideRouterStore(config)],\n        };\n    }\n}\n/** @nocollapse */ StoreRouterConnectingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreRouterConnectingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ StoreRouterConnectingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreRouterConnectingModule });\n/** @nocollapse */ StoreRouterConnectingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreRouterConnectingModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: StoreRouterConnectingModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }] });\n\nfunction createRouterSelector() {\n    return createFeatureSelector(DEFAULT_ROUTER_FEATURENAME);\n}\n/**\n * @deprecated This function is deprecated in favor of `getRouterSelectors`.\n * For more info see: https://github.com/ngrx/platform/issues/3738\n */\nconst getSelectors = getRouterSelectors;\nfunction getRouterSelectors(selectState = createRouterSelector()) {\n    const selectRouterState = createSelector(selectState, (router) => router && router.state);\n    const selectRootRoute = createSelector(selectRouterState, (routerState) => routerState && routerState.root);\n    const selectCurrentRoute = createSelector(selectRootRoute, (rootRoute) => {\n        if (!rootRoute) {\n            return undefined;\n        }\n        let route = rootRoute;\n        while (route.firstChild) {\n            route = route.firstChild;\n        }\n        return route;\n    });\n    const selectFragment = createSelector(selectRootRoute, (route) => route && route.fragment);\n    const selectQueryParams = createSelector(selectRootRoute, (route) => route && route.queryParams);\n    const selectQueryParam = (param) => createSelector(selectQueryParams, (params) => params && params[param]);\n    const selectRouteParams = createSelector(selectCurrentRoute, (route) => route && route.params);\n    const selectRouteParam = (param) => createSelector(selectRouteParams, (params) => params && params[param]);\n    const selectRouteData = createSelector(selectCurrentRoute, (route) => route && route.data);\n    const selectRouteDataParam = (param) => createSelector(selectRouteData, (data) => data && data[param]);\n    const selectUrl = createSelector(selectRouterState, (routerState) => routerState && routerState.url);\n    const selectTitle = createSelector(selectCurrentRoute, (route) => {\n        if (!route?.routeConfig) {\n            return undefined;\n        }\n        return typeof route.routeConfig.title === 'string'\n            ? route.routeConfig.title // static title\n            : route.title; // resolved title\n    });\n    return {\n        selectCurrentRoute,\n        selectFragment,\n        selectQueryParams,\n        selectQueryParam,\n        selectRouteParams,\n        selectRouteParam,\n        selectRouteData,\n        selectRouteDataParam,\n        selectUrl,\n        selectTitle,\n    };\n}\n\n/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_ROUTER_FEATURENAME, FullRouterStateSerializer, MinimalRouterStateSerializer, NavigationActionTiming, ROUTER_CANCEL, ROUTER_CONFIG, ROUTER_ERROR, ROUTER_NAVIGATED, ROUTER_NAVIGATION, ROUTER_REQUEST, RouterStateSerializer, StoreRouterConnectingModule, createRouterSelector, getRouterSelectors, getSelectors, provideRouterStore, routerCancelAction, routerErrorAction, routerNavigatedAction, routerNavigationAction, routerReducer, routerRequestAction };\n//# sourceMappingURL=ngrx-router-store.mjs.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}