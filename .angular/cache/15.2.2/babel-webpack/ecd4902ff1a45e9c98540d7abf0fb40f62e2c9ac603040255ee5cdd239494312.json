{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport * as AuthActions from \"./store/auth.actions\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@ngrx/store\";\nexport class AuthService {\n  constructor(http, router, store) {\n    this.http = http;\n    this.router = router;\n    this.store = store;\n  }\n  autoLogin() {\n    const userData = JSON.parse(localStorage.getItem(\"userData\"));\n    if (!userData) {\n      return;\n    }\n    const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n    if (loadedUser.token) {\n      // this.user.next(loadedUser);\n      this.store.dispatch(new AuthActions.AuthenticateSuccess({\n        email: loadedUser.email,\n        userId: loadedUser.id,\n        token: loadedUser.token,\n        expirationDate: new Date(userData._tokenExpirationDate)\n      }));\n      const expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n      this.autoLogout(expirationDuration);\n    }\n  }\n  logout() {\n    // this.user.next(null);\n    this.store.dispatch(new AuthActions.Logout());\n    localStorage.removeItem(\"userData\");\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n  autoLogout(expirationDuration) {\n    console.log(expirationDuration);\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    // this.user.next(user);\n    const user = new User(email, userId, token, expirationDate);\n    this.store.dispatch(new AuthActions.AuthenticateSuccess({\n      email: email,\n      userId: userId,\n      token: token,\n      expirationDate: expirationDate\n    }));\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem(\"userData\", JSON.stringify(user));\n  }\n  handleError(errorRes) {\n    let errorMessage = \"An unknown error occured!\";\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case \"EMAIL_EXISTS\":\n        errorMessage = \"This email already exists\";\n        break;\n      case \"EMAIL_NOT_FOUND\":\n        errorMessage = \"This email is not found\";\n        break;\n      case \"INVALID_PASSWORD\":\n        errorMessage = \"Wrong password\";\n    }\n    return throwError(errorMessage);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Store));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"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","names":["throwError","User","AuthActions","AuthService","constructor","http","router","store","autoLogin","userData","JSON","parse","localStorage","getItem","loadedUser","email","id","_token","Date","_tokenExpirationDate","token","dispatch","AuthenticateSuccess","userId","expirationDate","expirationDuration","getTime","autoLogout","logout","Logout","removeItem","tokenExpirationTimer","clearTimeout","console","log","setTimeout","handleAuthentication","expiresIn","user","setItem","stringify","handleError","errorRes","errorMessage","error","message","factory","providedIn"],"sourceRoot":"","sources":["/Users/evgeniabondar/Desktop/Git folder/ng-cooking-app/src/app/auth/auth.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport { Router } from \"@angular/router\";\nimport { environment } from \"../../environments/environment.development\";\nimport { Store } from \"@ngrx/store\";\nimport * as fromApp from \"../store/app.reducer\";\nimport * as AuthActions from \"./store/auth.actions\";\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken: string;\n  email: string;\n  refreshToken: string;\n  expiresIn: string;\n  localId: string;\n  registered?: boolean;\n}\n\n@Injectable({ providedIn: \"root\" })\nexport class AuthService {\n  //user = new BehaviorSubject<User>(null);\n  private tokenExpirationTimer: any;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private store: Store<fromApp.AppState>\n  ) {}\n\n  autoLogin() {\n    const userData: {\n      email: string;\n      id: string;\n      _token: string;\n      _tokenExpirationDate: string;\n    } = JSON.parse(localStorage.getItem(\"userData\"));\n    if (!userData) {\n      return;\n    }\n\n    const loadedUser = new User(\n      userData.email,\n      userData.id,\n      userData._token,\n      new Date(userData._tokenExpirationDate)\n    );\n\n    if (loadedUser.token) {\n      // this.user.next(loadedUser);\n      this.store.dispatch(\n        new AuthActions.AuthenticateSuccess({\n          email: loadedUser.email,\n          userId: loadedUser.id,\n          token: loadedUser.token,\n          expirationDate: new Date(userData._tokenExpirationDate),\n        })\n      );\n      const expirationDuration =\n        new Date(userData._tokenExpirationDate).getTime() -\n        new Date().getTime();\n      this.autoLogout(expirationDuration);\n    }\n  }\n\n  logout() {\n    // this.user.next(null);\n    this.store.dispatch(new AuthActions.Logout());\n    localStorage.removeItem(\"userData\");\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n\n  autoLogout(expirationDuration: number) {\n    console.log(expirationDuration);\n    this.tokenExpirationTimer = setTimeout(() => {\n      this.logout();\n    }, expirationDuration);\n  }\n\n  private handleAuthentication(\n    email: string,\n    userId: string,\n    token: string,\n    expiresIn: number\n  ) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    // this.user.next(user);\n    const user = new User(email, userId, token, expirationDate);\n    this.store.dispatch(\n      new AuthActions.AuthenticateSuccess({\n        email: email,\n        userId: userId,\n        token: token,\n        expirationDate: expirationDate,\n      })\n    );\n    this.autoLogout(expiresIn * 1000);\n    localStorage.setItem(\"userData\", JSON.stringify(user));\n  }\n\n  private handleError(errorRes: HttpErrorResponse) {\n    let errorMessage = \"An unknown error occured!\";\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case \"EMAIL_EXISTS\":\n        errorMessage = \"This email already exists\";\n        break;\n      case \"EMAIL_NOT_FOUND\":\n        errorMessage = \"This email is not found\";\n        break;\n      case \"INVALID_PASSWORD\":\n        errorMessage = \"Wrong password\";\n    }\n    return throwError(errorMessage);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}